var documenterSearchIndex = {"docs":
[{"location":"package tests/#Package-tests","page":"Package tests","title":"Package tests","text":"","category":"section"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"The code units pointed to in this page should be run within the general julia environment once PermutationTests.jl has been installed.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"","category":"page"},{"location":"package tests/#Code-tests","page":"Package tests","title":"Code tests","text":"","category":"section"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"For testing the main functions of the package, run the runtests.jl unit, located in the  test folder.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"","category":"page"},{"location":"package tests/#Benchmarks","page":"Package tests","title":"Benchmarks","text":"","category":"section"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"Multiple comparison tests are multi-threaded. In general PermutationTests.jl is very fast; you may expect to wait less then a second to get the result of a multiple comparison correlation test involving 20000 hypotheses with samples of 20 observations each.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"For running benchmarks on your computer use the benchmarks.jl unit located in the src\\extras\\benchmarks folder.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"In that folder you will also find a pdf showing plots and tables generated by the unit, as it is currently  published.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"tip: Benchmarks hardware\nHere below are the results obtained running the unit on a regular laptop running under Windows 10 equipped with a Intel Core i7-8650U CPU @ 1.90GHz and 32Go of RAM.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"For univariate tests, the figure below reports the minimum execution time for approximate tests using 10000 random permutations for various numbers of observations (e.g., subjects):","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"(Image: Figure 2)","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"Legend: IS=independent samples, RM=repeated measures, 1S=one-sample, St.=Student","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"We see that with 9000 observations, all tests execute within 4s, with the correlation/trend test, all types of t-tests, the McNemar test and the sign test executing within 1s. ","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"For multiple comparisons tests, the figure below reports the minimum execution time for approximate tests using 10000 random permutations for 12 observations and various numbers of hypotheses:","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"(Image: Figure 3)","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"Legend: IS=independent samples, RM=repeated measures, 1S=one-sample, St.=Student","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"We see that for sample size = 12 and 1000 hypotheses, the correlation and t-test for independent samples complete in about 200ms, while the other tests need about 2 to 8 seconds.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"","category":"page"},{"location":"package tests/#Error-Control","page":"Package tests","title":"Error Control","text":"","category":"section"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"All univariate statistical hypothesis tests must control the  type I error under the null hypotheses.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"As explained in the overview, the multiple comparisons tests implemented in PermutationTests.jl control the (FWE) rate under the global null hypothesis.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"The errorControl.jl unit located in the src\\extras\\errorControl folder runs simulations to verify these errors for all implemented tests. ","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"In that folder you will also find a pdf showing the plots of the data the unit produces as it is currently  published.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"As an example, in the figure below the orange line is the p-p plot of the observed p-values versus the expected p-values under the null hypothesis. The plot has been obtained with 1000 simulations of a univariate Pearson correlation test by data permutation with four sample sizes (N). The blue line traces the expected  p-values (control level):","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"(Image: Figure 4)","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"For multivariate permutation tests, the figure below show the proportion of rejected hypotheses obtained  across 100 simulations for several tests and 2, 5, 10 or 100 hypotheses tested simultaneously.  The FWE is controlled if the proportion is inferior to the nominal FWE level of the test, 0.05 for this simulation.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"(Image: Figure 5)","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"","category":"page"},{"location":"package tests/#Power","page":"Package tests","title":"Power","text":"","category":"section"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"The power of a statstical hypothesis test is the probability that the test correctly rejects the null  hypothesis when it is false. It depends on many factors, including the sample size, the effect size, the characteristics of the test and more.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"The power.jl unit located in the src\\extras\\power folder contains example code to estimate the power of two univariate and multiple comparisons tests implemented in PermutationTests.jl. The code can be expanded for the other implemented tests as well as for running the power analysis with different parameters.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"In that folder you will also find a pdf showing the plots of the data the unit, as it is currently  published, produces.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"As an example, the figure below compares the power of the univariate Pearson correlation test to its parametric counterpart, which is the usual test for correlation or of the slope of a regression line  (see section \"Slope of a regression line\" here). The power is estimated for four sample size values (N) using random Gaussian data and 1000 simulations.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"(Image: Figure 6)","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"We see that the power of the permutation and parametric test is very close for all sample size values.","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"For multivariate permutation tests, the figure below show the proportion of truly rejected hypotheses  (number of rejected hypotheses divided by the number of false hypotheses) of the t-test for  indipendent samples ( 8 subjects per group) obtained with 100 simulations when testing 5, 20 and 100 hypotheses simultaneously (M).  In these simulations, multivariate Gaussian data is generated under H_0 for half of the hypotheses and for the remaining half with an effect size allowing an expected p-value equal to 0.01 for each hypothesis tested separatedly with the parametric test. The hypotheses have geen generated uncorrelated and with three different degrees of uniform correlation such that the expected p-value of the correlation ùîºp(œÅ) is equal to 1, 0.1 or 0.01. See the preamble for a discussion on correlation among hypotheses. ","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"(Image: Figure 7)","category":"page"},{"location":"package tests/","page":"Package tests","title":"Package tests","text":"We see that, on the average of all simulations, the multiple comparisons permutation max-t test  implemented in this package is always more powerful than the Bonferroni correction procedure, it does not matter the number of hypotheses and whether the hypotheses are correlated or not.  The advantage of the permutation approach increases as the correlation among variables (œÅ) increases (hence its expected p-value decreases).","category":"page"},{"location":"create your own test/#Create-your-own-test","page":"Create your own test","title":"Create your own test","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"This page illustrates how you can create univariate and multiple comparisons permutation tests besides those already supported by PermutationsTests.jl.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Good knowledge and understanding of the whole documentation is required for continuing reading this page, including the Extras pages.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"There are two ways you can extend the capability of PermutationTests.jl.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The first, very simple, but limited, is by using existing tests with particular data input.\nThe second, which needs a little development, but is much more general, allows you to create new tests defining your own test statistics.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The illustration proceeds by examples of increasing complexity.","category":"page"},{"location":"create your own test/#Index-of-examples","page":"Create your own test","title":"Index of examples","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Serial Examples\n1 Univariate autocorrelation test\n2 Multiple comparison autocorrelation test\n3 Univariate t-test for independent samples\n4 Multiple comparison correlation test\n5 Univariate Chatterjee correlation\n6 Multiple comparisons Chatterjee correlation\n7 Univariate distance correlation\n8 Multiple comparison distance correlation","category":"page"},{"location":"create your own test/#Using-existing-tests","page":"Create your own test","title":"Using existing tests","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The approach for constructing univariate and multiple comparisons tests is illustrated by creating tests for the autocorrelation, which are not in the API of the package.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/#Example-1:-univariate-autocorrelation-test","page":"Create your own test","title":"Example 1: univariate autocorrelation test","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"As an example, let us detect the presence of autocorrelation at lag 1, similar to what the  Durbin-Watson test does.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"PermutationTests.jl implements the Pearson product moment correlation statistic and a test for it. We can then test the null hypothesis that the autocorrelation at lag 1 is equal to zero by performing a correlation test on a data vector x and a lagged version of itself y.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"This is simply achieved by calling the _permTest! function, which ultimately performs all  univariate tests implemented in the package.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"First, let us create some data autorrelated at lag 1 to get a working example:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"using PermutationTests\n\nN=300\ndata=randn(N) \nfor i=2:length(data)\n  data[i-1]=data[i-1]+data[i]\nend\n\n# Data and lagged version of the data\nx=data[1:end-1]\ny=data[2:end]","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Our univariate test on autocorrelation is obtained with","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"t = _permTest!(copy(x), y, N-1, PearsonR(), PearsonR())","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"NB: we pass a copy of x as this vector will be permuted. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"If we wish to wrap the test in a friendly function, we can write","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"autocorTest(x; kwargs...) = \n  _permTest!(x[1:end-1], x[2:end], length(x)-1, PearsonR(), PearsonR(); kwargs...)","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The test will be executed then simply as","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"t2 = autocorTest(data)","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"By default the test is bi-directional, thus the above call is a test for the autocorrelation regardless its sign. Our function autocorTest accepts all optional keyword arguments of the _permTest! function, thus we can easily obtain exact or approximate tests with a specified number of permutations, left- or right-directional tests, etc. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/#Example-2:-multiple-comparison-autocorrelation-test","page":"Create your own test","title":"Example 2: multiple comparison autocorrelation test","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"With the same ease, we can test simultaneously the autocorrelation at several lags using the  multiple comparison version of the correlation test.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"This is achieved by calling the _permMcTest!, which ultimately performs all  multiple comparisons tests implemented in the package. Now we craete a vector x and a vector Y holding as many lagged versions of x as we wish to test:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let us create some data autorrelated at lag 1 and 2 to get a working example:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"using PermutationTests\n\nN=300\ndata=randn(N) \nfor j=1:2, i=2:length(data)\n  data[i-1]=data[i-1]+data[i]\nend\n\n# We will test lags 1 to 30\nlags=1:30 \nx=data[1:end-length(lags)]\nY=[data[l+1:end-length(lags)+l] for l in lags]","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Our muliple comparisons test on autocorrelations is","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"tMc = _permMcTest!(copy(x), Y, N-length(lags), PearsonR(), PearsonR())","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The p-values are retrived by ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"tMc.p # p-values for lags 1...30 ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Notice that the test above is different from the  Liung-Box test, which is a multivariate test for a group of lags: with a multiple comparison tests we have tested each lag in the group simultaneously, controlling the family-wise error (FWE) rate at the nominal level (0.05 by default). Thus on the base of the p-values  we can take a decision on the null hypothesis at each lag.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"As we have done for the univariate test, we may want to wrap the call in a friendly function. This is left as an exercise.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/#Defining-new-test-statistics","page":"Create your own test","title":"Defining new test statistics","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"You can create your own permutation tests based on a custom test statistic as long as   the permutation scheme for your test is supported by PermutationTests.jl.  The ability to create a test for virtually whatever test-statistic is a fine characteristics of PermutationTests.jl and will be illustrated below with examples of ascending complexity.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The procedure to follow is the same whether you want  to create your own univariate or multiple comparisons test. It involves two preliminary steps:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"define a new Statistic type to name the test statistic you want to use\nwrite a method for the testStatistic function to compute the test statistic for both the observed and permuted data","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"You then obtain the test just calling the _permTest! function for an univariate test and the _permMcTest! for a multiple comparisons test, as we will show. Two arguments of these functions are particularly important:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Argument asStat, which determines the permutation scheme of the test. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"tip: keep in mind\nFour permutation schemes are implemented in the package, corresponding to four implemented groups of test-statistics. The asStat argument can be one of the following built-in test statistics or any test statistic belonging to the same group:PearsonR()\nAnovaF_IS()\nAnovaF_RM()\nStudentT_1S()Refer to the documentation of genPerms and the documentation linked therein.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Argument fstat, which is a function applied to all observed and permuted statistic.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"tip: keep in mind\nArgument fstat of _permTest! by default is the abs julia function, which yields a bi-directional test for a test-statistic that is distributed symmetrically around zero. For such test-statistics you will use  fstat=identity for a right-directional test and fstat=flip for a left-directional test. Note that this may not be appropriate for your own test statistic. For example, if your test statistic is not symmetric and a right-tailed test is of interest, you must use fstat=identity. See below for examples.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"warning: important\nThe permutation vector, which is always the first argument of the _permTest! function for an univariate test and of the _permMcTest! for a multiple comparisons test must correspond to the permutation yielding the observed statistic (i.e., no data permutation).","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/#Example-3:-univariate-t-test-for-independent-samples","page":"Create your own test","title":"Example 3: univariate t-test for independent samples","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"We create a new test for the difference of the mean between two independent samples. Such a test is equivalent to the Student's t-test for independent samples, since the mean difference is the nominator of the t statistic and the denominator is invariant with respect to data permutation.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The permutations scheme is the same as the permutation scheme of the AnovaF_IS() (or StudentT_IS)  test statistic, hence it is supported by PermutationTests.jl and we can reuse it.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"First, let us import testStatistic from PermutationTests.jl since we will write a new method for it:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"using PermutationTests\nimport PermutationTests: testStatistic","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"(1) Define a new Statistic type to name the test statistic you want to use","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"struct MeanDiff <: Statistic end","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"(2) Write a method for the testStatistic function to compute the mean difference, it does not matter if the data is observed or permuted. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"We will input the data exactly as for the AnovaF_IS() (or StudentT_IS) statistic.  Our observations are divided in two groups. In this case, for this and equivalent statistics, data input is given as a single vector  y of length N1+N2, with the N1 observations followed by the N2 observations (see studentTestIS). ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The first argument of the testStatistic method is always the permutation vector x,  holding in this case 1 for subjects of group 1 and 2 for subjects of group 2, that is, x=[repeat ([1], N1); repeat([2], N2)]. When given as input, x will reflect the positioning of the observed data  and for permuted data it will be a permutation thereof. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"A simple implementation could be: ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"function testStatistic(x, y, stat::MeanDiff; kwargs...)\n    # get the number of subjects in each gruoup\n    ns=[count(j->j==i, x) for i=1:length(unique(x))]\n\n    s=[0., 0.]\n    @simd for i ‚àà eachindex(x, y) \n        @inbounds (s[x[i]] += y[i])\n    end\n    return (s[1]/ns[1]) - (s[2]/ns[2]) # mean difference\nend","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"That's it. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let's test our own test. First create some data","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"y=[4., 5., 6., 7., 1., 2., 3]\nns=[4, 3] # N1=4, N2=3","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"For the permuttaion vector the dedicated function membership is available:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"x=membership(StudentT_IS(), ns) # = [repeat ([1], N1); repeat([2], N2)]","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"A two-directional exact test, as performed by PermutationTests.jl is ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"println(\"t-test independent samples (bi-directional) using PermutationsTest.jl: \");\nt1 = studentTestIS(y, ns)","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let us run the test we have created. Notice that argument stat of _permTest! is MeanDiff(), while argument asStat is AnovaF_IS()  The default fstat is julia abs() function, thus the test will be bi-directional as for the test t1 here above.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"println(\"t-test independent samples (bi-directional) using our own statistic: \");\nt2 = _permTest!(copy(x), y, ns, MeanDiff(), AnovaF_IS())","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"NB: we pass a copy of x as this vector will be permuted. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"We now illustrate with a simple example a nice opportunity we have to write  efficient code to compute test statistics; the above implementation of the testStatistic function computes the group numerosity (ns=[N1, N2])  at each permutation, however ns is invariant to permutations. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let us rewrite the function then using the cpcd argument,  which will be passed to the _permTest! functions in order to  (optionally) pre-compute ns:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"function testStatistic(x, y, stat::MeanDiff; cpcd=nothing, kwargs...)\n    if cpcd===nothing \n        ns=[count(j->j==i, x) for i=1:length(unique(x))]\n    else\n        ns=cpcd\n    end\n\n    s=[0., 0.]\n    @simd for i ‚àà eachindex(x, y) \n        @inbounds (s[x[i]] += y[i])\n    end\n    return (s[1]/ns[1]) - (s[2]/ns[2]) # mean difference\nend","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Running the test now can use the cpcd argument to avoid redundant computations:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"t3 = _permTest!(copy(x), y, ns, MeanDiff(), StudentT_IS(); cpcd=ns) ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"You can check that the p-values obtained by all the above tests is identical:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"t1.p‚âàt2.p‚âàt3.p ? (@info \"It works!\") : \n                 (@error \"It does not work!\")","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"To run a right-directional test:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"t4 = _permTest!(copy(x), y, ns, MeanDiff(), StudentT_IS(); fstat = identity)","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"To run a left-directional approximate test (see _permTest!):","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"t5 = _permTest!(copy(x), y, ns, MeanDiff(), StudentT_IS(); fstat = flip, switch2rand=1)","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Etc. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"As an exercise, wrap the test we have created in a friendly function.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"tip: Nota Bene\nWe are not restricted to the use of a cpcd argument. In later examples we will show how to use  an arbitrary number of specially defined keywords in order to obtain efficient tests.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/#Example-4:-multiple-comparison-correlation-test","page":"Create your own test","title":"Example 4: multiple comparison correlation test","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"We create another version of the Pearson product-moment correlation test between a fixed variable given as a vector x and M variables given as a vector of M vectors Y. We want to test simultaneously  all correlations between x and Y[m], for m=1M.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The procedure to follow is the same with two differences: the function testStatistic will now compute  each one of the `M test statistics and we will finally call the _permMcTest! function instead of the _permMcTest! function.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The permutations scheme for the correlation test is the one of the PearsonR() statistic, hence it is supported by PermutationTests.jl and we can reuse it (using the appropriate asStat argument of _permMcTest!).","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"First, let us import testStatistic from PermutationTests.jl and what we need for the computations:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"using PermutationTests\nimport PermutationTests: testStatistic\n\nusing LinearAlgebra: dot, ‚ãÖ # we are going to use the dot product","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"(1) Define a new Statistic type to name the test statistic you want to use, such as","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"struct MyPearsonR <: Statistic end","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"(2) Write a function to compute the ith observed and permuted test statistic. In order to obtain a faster test we will work with standardized variables, thus the Pearson correlation is given simply by the  cross-product divided by N. We can write then","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"testStatistic(x, Y, i, stat::MyPearsonR; kwargs...) = (x ‚ãÖ Y[i])/length(x)","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"That's it. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let's test our own test. First create some data as example:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"N, M = 7, 100 # N=7 observations, M=100 hypotheses\nx=randn(N);\nY=[randn(N) for m=1:M];","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"A two-directional exact test, as performed by PermutationTests.jl is obtained by","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"println(\"correlation test using PermutationsTest.jl: \");\nt1 = rMcTest!(x, Y)","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let's run our own test. Remind that our test works only for standardized variables, thus we have to input standardized variables. We can use function Œº0œÉ1:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"println(\"correlation test using our own test: \");\nt2 = _permMcTest!(Œº0œÉ1(x), [Œº0œÉ1(y) for y ‚àà Y], length(x), MyPearsonR(), PearsonR()) ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Check that the p-values obtained by the two tests is identical:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"abs(sum(t1.p-t2.p))<1e-8 ?  (@info \"my test works!\") : \n                            (@error \"my test does not work!\")","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Check also the observed statistics:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"abs(sum(t1.obsstat-t2.obsstat))<1e-8 ?  (@info \"my test works!\") : \n                                        (@error \"my test does not work!\")","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"To run a right-directional test:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"t3 = _permMcTest!(Œº0œÉ1(x), [Œº0œÉ1(y) for y ‚àà Y], length(x), MyPearsonR(), PearsonR(); \n        fstat = identity) ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"To run a left-directional approximate test:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"t4 = _permMcTest!(Œº0œÉ1(x), [Œº0œÉ1(y) for y ‚àà Y], length(x), MyPearsonR(), PearsonR(); \n        fstat = identity, switch2rand=1)","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"As an excercise, wrap our test in a friendly function that will standardize the input data before running the test. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/#Example-5:-univariate-Chatterjee-correlation","page":"Create your own test","title":"Example 5: univariate Chatterjee correlation","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Examples (4) and (5) are not very interesting per se, as they are just equivalent forms of tests already implemented in the API of PermutationTests.jl. Creating genuinely new tests is not necesserely more complicated thought, as it is shown in this example.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The Chatterjee (2021) correlation Œæ_xy is an asymmetric, asymptotycally consistent  estimator of how much a random variable y is a measurable function of x. Thus, we can use it to test a null hypothesis of the form ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"H_0 yf(x). ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The function f does not have to be monotonic, nor linear. In the following, x and y are assumed continuous with no ties.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let r be the ranks of variable y computed after sorting y by ascending  order of x. The coefficient is given by","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Œæ_xy= 1-frac3Œ¥_xy(r)n¬≤-1, ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"where","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Œ¥_xy(r)=sum_1^n-1left r_i+1 - r_i right","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Œæ_xy takes value in interval 0 1 asymptotically. The limits with finite sampling are -12+O(1n) (n-2)(n+1). ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Œæ has a simple asymptotic Gaussian distribution given by n*Œæ sim N(0 25) and is computed in O(ntextrmlogn).","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Reference: S. Chatterjee (2021) a new coefficient of correlation, journal of the american statistical association  116(536), 506-15 ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let us now construct a univariate permutation tests for Œæ_xy. The following code block defines a function to create it:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"using PermutationTests\nusing StatsBase: ordinalrank # install StatsBase.jl if you don't have it\nimport PermutationTests: testStatistic\n\nstruct ChatterjeeŒæ <: Statistic end\n\ntestStatistic(r, y, stat::ChatterjeeŒæ; kwargs...) = sum(abs, diff(r))\n\nxiCorPermTest(x, y; kwargs...) =\n   _permTest!(ordinalrank(y[sortperm(x)]), [], length(x), ChatterjeeŒæ(), PearsonR(); \n                fstat = flip, kwargs...)\n","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"As in example 3, we import testStatistic and we define a type for the test statistic of interest as a Statistic type, which we have named ChatterjeeŒæ. Notice that we use Œ¥_xy(r) as an  equivalent test statistic for Œæ_xy. Notice also that while this is possible because Œ¥_xy(r) and Œæ_xy are a monotonic function of each other, their relationship is inverted, which will be taken care of later.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Then, we declare a testStatistic method for computing the Œ¥_xy(r) quantity defined above for the observed and permuted data.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Finally, we invoke the _permTest! function. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The test works this way: _permTest! takes as input the n ranks and list all n permutations of the rank indices for an exact test, or a random number of them for an approximate test. As the ranks are a permutation of (1n) themselves, at each permutation the testStatistic function is invoked and the test statistic is computed directly on the permutation vector, whcih is always passed by _permTest! to testStatistic as the first argument. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Notice that the test of interest is meaningful only as a right-directional test for Œæ_xy, but this is a  left-directional test for Œ¥_xy(r), therefore we have used keyword argument fstat = flip. This takes care of the aforementioned inverse relationship of our equivalents statistic.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let's use the test we have created:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"n = 100\nx = randn(n)\ny = randn(n)\nt = xiCorPermTest(x, y) # is not signifant\n\ny = x.^2+randn(length(x))/5\nt1 = xiCorPermTest(x, y) # y is a function of x with little noise\n","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/#Example-6:-multiple-comparisons-Chatterjee-correlation","page":"Create your own test","title":"Example 6: multiple comparisons Chatterjee correlation","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Next, let us define the multiple comparisons permutation test for Œæ_xy. We wish to test simultaneously","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"H_0(m) y_mf(x) m=1M","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The code could be:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"using PermutationTests\nusing StatsBase: ordinalrank # install StatsBase.jl if you don't have it\nimport PermutationTests: testStatistic\n\nstruct ChatterjeeŒæ <: Statistic end\n\ntestStatistic(p, Y, m::Int, stat::ChatterjeeŒæ; kwargs...) = \n    1.0-((3*sum(abs, diff(Y[m][p])))/(abs2(length(x))-1))\n\n# Take as input x and Y=y1,...,yM\nfunction xiCorPermMTest(x, Y; kwargs...) \n   p = sortperm(x)\n   n = length(x)\n   x_ = collect(Base.OneTo(n))\n   return _permMcTest!(x_, [ordinalrank(y[p]) for y ‚àà Y], n, ChatterjeeŒæ(), PearsonR(); \n                  fstat = identity, kwargs...)\nend                ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The first four lines are to be omitted if we continue writing on the same unit where we have written  the univariate test. ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Again, we define a method for the testStatistic function and we invoke the the _permMcTest! function.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Here we have to adopt a slightly different strategy: testStatistic takes as input the permutation vector and the ranks of the y_1y_M vectors. It computes the Œæ_xy statistic (note: not an equivalent statistic) for these vectors after sorting them all by the same sorting key at each permutation, which is the permutation vector passed by _permMcTest! to testStatistic as the x_ vector.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Note that Œæ_xy can take negative values, thus we pass to _permMcTest! keyword argument fstat = identity; this will result in the correct right-directional test we sought.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let's use the test we have created:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"n = 100\nm = 10\nx = randn(n)\nY = [randn(n) for i=1:m]\nt = xiCorPermMTest(x, Y) # is not signifant\n\nY = [x.^2+randn(length(x))/5  for i=1:m]\nt1 = xiCorPermMTest(x, Y) # y1,...ym are a function of x with little noise\n","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/#Example-7:-univariate-distance-correlation","page":"Create your own test","title":"Example 7: univariate distance correlation","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"This and next example illustrate how we can crete a test for a complex test statistic, still avoiding redundant computations, as if we wrote the code for a permutation test from scratch.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The distance correlation (Sk√©zely, Rizzo and Bakirov, 2007) extends the concept of correlation to distances among objects living in metric spaces, yielding a measure of dependence that is somehow sensitive to  linear and non-linear dependence. We will here limit ourselves to scalars, vectors and matrices, it does not matter if real or complex.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let (X_k Y_k) k=1K be K pairs of observations (may be scalars, vectors, matrices). The elements within X and Y must have the same size,  but the size of the elements in X may be different from the size of those in Y.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let D_x and D_y be the distance matrices with elements","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"D_x^(ij)=left X_i - X_j right_p  ij=1K","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"and","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"D_y^(ij)=left Y_i - Y_j right_p  ij=1K,","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"where leftcdotright_p is the p-norm, with p(0 2.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let ","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"H=I-K^-1textbf1textbf1^T","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"be the centering matrix, where I is the identity matrix and  textbf1 is the vector of ones.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"A=HD_xH","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"and","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"B=HD_yH","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"be the double-centered distance matrices. Then the distance variance is defined such as","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"nu(X)=frac1K^2sum_ij=1^Ka_ij^2","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"and the distance covariance such as","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"nu(X Y)=frac1K^2sum_ij=1^Ka_ij^2b_ij^2.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Finally, the distance correlation is defined such as","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"rho(X Y)=fracnu(X Y)sqrtnu(X)nu(Y),","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"where by convention it takes value zero if the denominator is zero.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Reference: G.J. Sz√©kely, M.L. Rizzo, N.K. Bakirov (2007). Measuring and testing dependence by correlation of distances Ann. Statist. 35(6): 2769-2794.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"After giving the definition, let us see how we can create a univariate permutation tests for the distance correlation.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"First, let us define some functions we will need.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"\nusing LinearAlgebra: I, norm, Hermitian, LinearAlgebra\n\n# Distance matrix for an array `X` of scalars, vectors, matrices, etc.\n# The `n` elements of `X` can be real or complex.\n# `pnorm` is the norm used to get distaces d_ij=norm(X[i]-X[j], pnorm),\n# see julia LinearAlgenbra.norm function.\n# Return the distance matrix filled only in the upper triangle.\n# Note: this is always real.\nfunction dm(x, n; pnorm=2)\n    D = Matrix{Float64}(undef, n, n)\n    for i=1:n-1 \n        @simd for j=i+1:n\n            @inbounds D[i, j] = norm(x[i]-x[j], pnorm)\n        end\n    end\n    @simd for i=1:n \n        @inbounds D[i, i] = 0. \n    end\n    return D\nend    \n\n\n# x and y are vectors holding n realizations of (real or complex) scalars, vectors, \n# matrices... The elements in y must not have the same dimension as those in x, \n# however x and y must hold the same number of elements.\n# Return H*Dx*H' and H*Dy*H', \n# H is the centering matrices and Dx and Dy are the \n# distance matrices for x and y according to norm `pnorm`. \nfunction getDistances(x, y; pnorm=2)\n    n = length(x)\n    H = Matrix{Float64}(I, n, n) - fill(1/n, n, n)\n    Hm = LinearAlgebra.Hermitian\n    return H * Hm(dm(x, n; pnorm)) * H', H * Hm(dm(y, n; pnorm)) * H'\nend\n\n# As `getDistances`, but here Y is a k-vector of vectors of realizations,\n# thus, return H*Dx*H' and H*Dy1*H',...,H'*Dyk*H', \n# In addition to the restrictions of `getDistances`, the k vectors of Y must\n# contain elements of the same size.\nfunction getMDistances(x, Y; pnorm=2)\n    # Centering matrices\n    n = length(x)\n    H = Matrix{Float64}(I, n, n) - fill(1/n, n, n)\n    Hm = LinearAlgebra.Hermitian\n    return H * Hm(dm(x, n; pnorm)) * H', [H * Hm(dm(y, n; pnorm)) * H' for y ‚àà Y]\nend\n\n# Distance variance. Eq. (2.9) in Sz√©kemy, Rizzo and Bakirov(2007). \n# D is a distance matrix\ndVar(D) = sum(x->abs2(x), D)/size(D, 1)^2  \n\n# Distance covariance. Eq. (2.8) in Sz√©kemy, Rizzo and Bakirov(2007)\n# Dx and Dy are two distance matrices of equal size\ndCov(Dx, Dy) = sum(Dx.*Dy)/size(Dx, 1)^2  \n\n# Distance correlation. Eq. (2.10) in Sz√©kemy, Rizzo and Bakirov(2007)\n# Dx and Dy are two distance matrices of equal size\nfunction dCor(Dx, Dy)\n    den = dVar(Dx) * dVar(Dy)\n    return den > 0 ? sqrt(dCov(Dx, Dy)/sqrt(den)) : 0.  \nend","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"We are now ready to create the univariate test.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"First, let us import testStatistic:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"using PermutationTests\nimport PermutationTests: testStatistic","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Given two vectors of elements x and y with distance matrices Dx and Dy, the test is  obtained permuting the indices of x. Instead of recomputing distance matrix Dx at each permutation,  the strategy is to permute instead the rows and columns of Dx by a permutation  matrix P that is changed at each permutation according to the permutation vector x.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let us then write the function to do this:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"# Overwrite P with a permutation matrix given a vector x holding a \n# permutation of n indices. P must exist, be square and have same dimension as x\nfunction permMatrix!(P, x)\n   fill!(P, 0.)\n   @simd for i‚ààaxes(P, 1)\n         @inbounds P[i, x[i]] = 1. \n   end\n   return P\nend","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"As in the previous examples, we need to define a type for the distance correlation statistic:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"struct Dcor <: Statistic end","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Next, as in the previous example, we need to define a method for testStatistic. This function takes as arguments a permutation vector p and Dy, the distance matrces of y, which is fixed across permutations.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Furthermore, we will use four specially defined keyword arguments:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"H : the centering matrix\nP : the permutation matrix (to be updated at each call of the function)\nDx: the original distance matrix for data x\ndVarDy: the distance variance of y","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"At each permutation then, we will permute and double-center Dx in order to  compute the distance correlation. The quantities that are invariant by permutation are passed to the function so that we do not need to recompute them.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"function testStatistic(p, Dy, stat::Dcor; H, P, Dx, dVarDy, kwargs...)\n   permMatrix!(P, p)\n   # Hx * P * Dx * P' * Hx', Dx with rows and columns permuted\n   HxPDxPHx = H * (P * Dx * P') * H' \n   den = dVar(HxPDxPHx) * dVarDy # square of the denominator of dCor \n   return den > 0 ? sqrt(dCov(HxPDxPHx, Dy)/sqrt(den)) : 0. # dCor\nend","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Finally, we write a function preparing the data and calling the _permTest! function. The preparation involves computing the distance matrices (once and for all), making some checks, creating the permutation vector p and the keyword arguments that will be passed internally to the function testStatistic we have created by _permTest!.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Importantly, the vector p is created so as to correspond to the permutation yielding the observed statistic (ie, no data permutation), that is, in this case, the vector with the indices in the natural order 1n.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"# The test takes as input two vectors of elements, which may be scalars, vectors or matrices.\nfunction dCorPermTest(x, y; pnorm=2, kwargs...)\n   Dx, Dy = getDistances(x, y; pnorm) \n   n = size(Dx, 1)\n   size(Dx, 1) == size(Dx, 2) || throw(ArgumentError(\"Function dCorPermTest: Did you want to call dCorPermMTest intead? The `Dx` and `Dy` distance matrices that have been computed are not square\"))\n   size(Dx) == size(Dy) || throw(ArgumentError(\"Function dCorPermTest: Did you want to call dCorPermMTest intead? The `Dx` and `Dy` distance matrices that have been computed are not square or do not have the same size\"))\n   p = collect(Base.OneTo(n)) # permutation vector\n   \n   #  the centering matrix, the identity matrix, Dx, dVar(Dy)\n   Id = Matrix{Float64}(I, n, n)\n   H = Id - fill(1/n, n, n) # the centering matrix\n   P = copy(Id) # the permutation matrix\n   dVarDy = dVar(Dy) # the distance variace of Dy (invariant to permutations)\n\n   return _permTest!(p, Dy, n, Dcor(), PearsonR(); fstat=identity, H, P, Dx, dVarDy, kwargs...)\nend","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"We are done.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let us use the function. We make an example where the elements of x and y are vectors. You can verify yourself that the test works in the same way if they are scalars or matrices.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"# Vectors\nn=10\nl=20\nx=[randn(l) for i=1:n]\ny=[randn(l) for i=1:n]\nperm = dCorPermTest(x, y; pnorm=2, switch2rand=1)\n\n# non-linear relationship (could be detected)\ny=[x_.^2+randn(length(x_))./10 for x_ in x]\nperm = dCorPermTest(x, y; switch2rand=1)","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/#Example-8:-multiple-comparison-distance-correlation","page":"Create your own test","title":"Example 8: multiple comparison distance correlation","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"This example reuses the code we have already written for the previous example 7.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The strategy here is the same as in that example, however here we have to be more careful as there are several keyword arguments that will be updated at each permutation.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"The additional code we need to create a multiple comparisons permutation test is here below. As compared to the previous example, note that:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"we are asking function _permMcTest! to pass internally to the function testStatistic the product HPDxPH as keyword argument because we do not want to compute it for every call of the testStatistic function, but only when it is called for the first hypothesis.\nwe are similarly also passing the distance variance of Dx dVarDx as a keyword argument for the same reason.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Note also","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"the sytax [:] to update variables passed as keyword \nthe fact that dVarDx is passed as a vector of one element so as to be possible to update it thanks to the syntax [:].","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"function testStatistic(x, DY, m::Int, stat::Dcor; H=H, P=P, Dx, dVarDY, HPDxPH, dVarDx, kwargs...)\n    if m==1\n        permMatrix!(P, x)\n        # Hx * P * Dx * P' * Hx', Dx with rows and columns permuted \n        HP = H * P\n        HPDxPH[:] = HP * Dx * HP'  # notice the [:] syntax; this kwarg is updated when m=1\n        dVarDx[:] = [dVar(HPDxPH)] # notice the [:] syntax; this kwarg is updated when m=1\n    end\n    \n    den = dVarDx[1] * dVarDY[m] # dVar(Dx) * dVar(Dy), square of the denominator of dCor \n    return den > 0 ? sqrt(dCov(HPDxPH, DY[m])/sqrt(den)) : 0. # dCor\n end\n \n\nfunction dCorPermMTest(x, Y; pnorm=2, kwargs...)\n    Dx, DY = getMDistances(x, Y; pnorm) \n\n    # checks\n    size(Dx, 1) == size(Dx, 2) || throw(ArgumentError(\"Function dCorPermMTest: The `Dx` and `Dy` distance matrices that have been computed are not square\"))\n    size(Dx) == size(DY[1]) || throw(ArgumentError(\"Function dCorPermMTest: The `Dx` and `Dy` distance matrices that have been computed are not square or do not have the same size\"))\n    length(unique(size.(DY, 1))) == 1 || throw(ArgumentError(\"Function dCorPermMTest: All elements of second data input must have equal size\"))\n    \n    n = size(Dx, 1)\n    p = collect(Base.OneTo(n)) # permutation vector\n    Id = Matrix{Float64}(I, n, n)\n\n    # keyword arguments that are not updated\n    H = Id - fill(1/n, n, n)\n    dVarDY = [dVar(Dy) for Dy ‚àà DY]\n\n    # Initialize keyword arguments that will be updated\n    HPDxPH = Matrix{Float64}(undef, size(Dx)...)\n    dVarDx = [0.0] # NB, cannot pass a scalar as kwarg if it is to be updated!\n    P = copy(Id) # The first permutation must correspond to 'no permutation'\n\n    return _permMcTest!(p, DY, n, Dcor(), PearsonR(); \n                        fstat=identity, threaded=false, H, P, Dx, dVarDY, HPDxPH, dVarDx, kwargs...)\n end\n","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Let us use the multiple comaparions test we have just created.","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Example where x and y hold vectors:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"# Vectors\nn=10\nl=20\nm=30\nx=[randn(l) for i=1:n]\nY=[[randn(l) for i=1:n] for j=1:m]\n# random data. No hypothesis should be significant\nperm = dCorPermMTest(x, Y)\n\n# The y1...ym variables are noisy copy of x.  \n# The p-value should be significant for about the first M/2 hypothesis out of M.\n# The actual number of rejected hypotheses could be slighty different then M/2. \nfor i=1:m√∑2\n    Y[i]=[x[j].+randn(l)./2 for j=1:n]\nend\nperm = dCorPermMTest(x, Y)","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"Example where x and y hold matrices:","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"# Matrices\nn=10\nl=20\nm=30\nx=[randn(l, l) for i=1:n]\nY=[[randn(l, l) for i=1:n] for j=1:m]\n# random data. No hypothesis should be significant\nperm = dCorPermMTest(x, Y)\n\n# The y1...ym variables are noisy copy of x.  \n# The p-value should be significant for about the first M/2 hypothesis out of M\n# The actual number of rejected hypotheses could be slighty different then M/2. \nfor i=1:m√∑2\n    Y[i]=[x[j].+randn(l, l)./2 for j=1:n]\nend\nperm = dCorPermMTest(x, Y)\n","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"In conclusion, in the above examples we have illustrated how to create permutation tests of increasing complexity. The last two examples concerns tests that are pretty complex and very different from any of the test implemented in Permutationtests.jl, where even the permutation scheme had to be defined differently. The diverse procedures exposed here above can be adapted to new problems in order to create a countless number of new permutation tests.","category":"page"},{"location":"create your own test/#Useful-functions-for-creating-your-own-tests","page":"Create your own test","title":"Useful functions for creating your own tests","text":"","category":"section"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"","category":"page"},{"location":"create your own test/","page":"Create your own test","title":"Create your own test","text":"_permTest!\n_permMcTest!\nflip\nmembership\ntestStatistic","category":"page"},{"location":"create your own test/#PermutationTests._permTest!","page":"Create your own test","title":"PermutationTests._permTest!","text":"function _permTest!(x, y, ns::nsType, stat::Stat, asStat::AsStat;\n                    standardized::Bool=false, centered::Bool=false, \n                    nperm::Int = 20000, \n                    fstat::Function = abs,\n                    compfunc::Function = >=,\n                    switch2rand::Int = Int(1e8),\n                    seed::Int = 1234,\n                    verbose::Bool = true,\n                    cpcd = nothing,\n                    kwargs...) where {Stat<:Statistic, AsStat<:Statistic}\n\nThis function ultimately performs all univariate permutation tests implemented in PermutationsTests.jl,  both exact and approximate (Monte Carlo). \n\nFor running tests use the univariate test functions. You need this function only for creating your own tests.\n\nRewrite x and/or y, depending on the test performed.\n\nFor the ns argument see ns.\n\nstat can be a singleton of the Statistic type or a user-defined singleton of this type  to be used as argument of a function implemented by the user to compute both the observed and permuted test statistics, see create your own test.\n\nasStat is a singleton of the Statistic type. It is used to determine the permutation scheme  and for this purpose it will be internally passed to genPerms and nrPerms.\n\nasStat determines also the input data format if you declare your own stat type. In this case the function you write for computing the observed and permuted test statistic will take the x and  y arguments as it follows: \n\nFor Stat belonging to group\n\nBivStatistic : x, y are the two vectors of N elements each for which the bivariate statistic is to be tested. ns is ignored.\nIndSampStatistic : we have K groups and N=N_1++N_K total observations; y holds all observations in a single vector such as [y1;...;yK] and x is the membership(::IndSampStatistic) vector. For example, for K=2, N_1=2 and N_2=3, x=[1, 1, 2, 2, 2].\nRepMeasStatistic : we have K measures (e.g., treatements) and N subjects; y holds the  K*N observations in a single vector such as [y1;...;yN], where each vector y_i, for i=1N, holds the observation at the K treatments and x=collect(1:K*N) (see membership(::RepMeasStatistic)).\nOneSampStatistic : We have N observations (e.g., subjects); y holds the N observations and x=ones(Int, N) (see membership(::OneSampStatistic)).\n\nnote: Nota Bene\nIn all cases x is treated as the permutation vector that will be permuted before calling the testStatistic function.\n\nFor length(x)>30 the approximate test is performed in all cases, \n\notherwise,\n\nif the number of systematic permutations exceeds switch2rand the approximate test is performed  using nperm random permutations (default 20000), \n\notherwise, \n\nthe exact test is performed. \n\nswitch2rand defaults to 1e8.  To perform approximate tests in all cases, set switch2rand, for example, to 1. \n\nIf stat is a BivStatistic, it optionally uses kwargs standardized or centered to compute them faster, see for example correlationTest.\n\nseed is the initial seed for generating random permutations (not used for exact tests).  To use a random seed, pass seed=0. For seed any natural number, the test will be reproducible.\n\nfstat is a function applied to the test statistic. By default this is the julia abs function,  which takes the absolute value, hence yieds a bi-directional test for a test statistic distributed symmetrically around zero. For a right-directional test using such test statistics pass here identity.  For a left-directional using such test statistics pass here flip.\n\ncompfunc is the function to compare the observed statistics to the permuted statistics.  The default function is >=. Don't change it unless you have studied the code of the function.\n\nIf verbose is true, print some information in the REPL while running the test.  Set to false if you run benchmarks. The default is true.\n\nFor the cpcd and kwargs... argument, see create you own test.\n\nReturn a UniTest structure.\n\nExamples\n\nusing PermutationTests\nx=randn(6)\ny=randn(6) \n# bi-directional exact test of the correlation between x and y\nt8 = _permTest!(Œº0(x), Œº0(y), length(x), Covariance(), Covariance(); centered=true) \nt8.p\nt8.stat\n#...\n\n# make a left-directional test and standardize the data\nt8_2 = _permTest!(Œº0œÉ1(x), Œº0œÉ1(y), length(x), Covariance(), Covariance(); \n        standardized=true, fstat=flip) \n\n# the same but force an approximate test\nt8_3 = _permTest!(Œº0œÉ1(x), Œº0œÉ1(y), length(x), Covariance(), Covariance(); \n        standardized=true, fstat=flip, switch2rand=1) \n\n# the same using 5000 random permutations\nt8_4 = _permTest!(Œº0œÉ1(x), Œº0œÉ1(y), length(x), Covariance(), Covariance(); \n        standardized=true, fstat=flip, switch2rand=1, nperm=5000) \n\nTo check more examples, see the uniTests_API.jl unit located in the src github folder and function test_unitests() in the runtests.jl unit located in the test github folder.\n\n\n\n\n\n","category":"function"},{"location":"create your own test/#PermutationTests._permMcTest!","page":"Create your own test","title":"PermutationTests._permMcTest!","text":"function _permMcTest!(x, Y, ns::nsType, stat::Stat, asStat::AsStat;\n            standardized::Bool=false, centered::Bool=false, \n            stepdown::Bool = true,\n            fwe::Float64 = 0.05,\n            nperm::Int = 20000, \n            fstat::Function = abs,\n            compfunc::Function = >=,\n            switch2rand::Int = Int(1e8),\n            seed::Int = 1234,\n            threaded::Bool = Threads.nthreads()>=4,\n            verbose::Bool = true,\n            cpcd = nothing) where {Stat<:Statistic, AsStat<:Statistic}\n\nThis function ultimately performs all multiple comparisons permutation tests implemented in PermutationsTests.jl,  both exact and approximate (Monte Carlo). \n\nFor running tests use the multiple comparisons test functions. You need this function only for creating your own tests.\n\nThe step-down version of the test is performed if stepdown is true (default). In this case the fwe (family-wise error) rate is used for rejection at each step (default=0.05).\n\nRewrite x and/or Y, depending on the test performed.\n\nFor the ns argument see ns.\n\nstat can be a singleton of the Statistic type or a user-defined singleton of this type  to be used as argument of two functions implemented by the user to compute the observed and permuted test statistics, see create your own test.\n\nwarning: Warning\nIn contrast to univariate tests, equivalent statistics are not possible for multiple comparison tests,  with the exception of CrossProd() if the data has been standardized and Covariance() if the data  has been centered and those only for correlation-like tests.The test statistics that must be used as Stat for the other kinds of test if a singleton of the  Statistic type is used are AnovaF_IS(), StudentT_IS(), AnovaF_RM(), and StudentT_1S().\n\nasStat is a singleton of the Statistic type. It is used to determine the permutation scheme  and for this purpose it will be passed to genPerms and nrPerms.\n\nasStat determines also the input data format if you declare your own stat type. In this case the two functions you write for computing the observed and permuted statistics will take the x and  Y arguments as it follows. \n\nFor Stat belonging to group\n\nBivStatistic : x is a fixed vector with N elements and Y an an M-vector of N-vectors. The M bivariate statistics between x and the y_m vectors of Y are tested simultaneously. ns is ignored.\nIndSampStatistic : we have K groups and N=N_1++N_K total observations; Y is an M-vector, each one holding all observations for the m^th hypothesis in a single vector. The m^th vector y_m concatenates the observations for all groups such as [y[m][1];...;y[m][K]]. x is the membership(::IndSampStatistic) vector, common to all hypotheses. For example, for K=2, N_1=2 and N_2=3, x=[1, 1, 2, 2, 2]. \nRepMeasStatistic : we have K measures (e.g., treatements) and N subjects; Y is an M-vector, each one holding the K*N observations for the m^th hypothesis in a single vector. The m^th vector y_m is such as [Y[m][1];...;Y[m][N]], where each vector Y[1][n], for n=1N, holds the observations for the K treatments and x=collect(1:K*N) (see membership(::RepMeasStatistic)). \nOneSampStatistic : We have N observations (e.g., subjects); Y is an M-vector, each one holding the N observations and x=ones(Int, N) (see membership(::OneSampStatistic)).\n\nnote: Nota Bene\nIn all cases x is treated as the permutation vector that will be permuted before calling the testStatistic function for each of the elements in Y.\n\nOptional keyword arguments switch2rand, nperm, standardized, centered, seed, fstat, compfunc and verbose have the same meaning as in the _permTest! function.\n\nIf threaded is true (default) the function is multi-threaded if the product of the number of hypotheses,      observations, and permutations exceed 500 millions. If you have unexpected problems with the function, try setting threaded to false.\n\nFor the cpcd and kargs... arguments, see create you own test.\n\nReturn a MultcompTest structure.\n\nThe number of executed steps S can be retrived as the length of the .rejections field  of the returned structure. \n\nExamples\n\nusing PermutationTests\nN, M = 8, 100 # 100 hypotheses, N=8\nx=randn(N)\nY=[randn(N) for m=1:M]\n# bi-directional exact test of the correlation between x and \n# all the M vector in Y.\nT12 = _permMcTest!(x, Y, N, PearsonR(), PearsonR())\nT12.p\nT12.stat\n#...\n\n# bi-directional exact test. Faster test by data standardization \nT12_2 = _permMcTest!(Œº0œÉ1(x), [Œº0œÉ1(y) for y in Y], N, CrossProd(), PearsonR(); \n                    standardized=true) \n\n# left-directional exact test.\nT12_3 = _permMcTest!(Œº0œÉ1(x), [Œº0œÉ1(y) for y in Y], N, CrossProd(), PearsonR(); \n                    standardized=true, fstat=flip)\n\n# as above, but force an approximate test\nT12_4 = _permMcTest!(Œº0œÉ1(x), [Œº0œÉ1(y) for y in Y], N, CrossProd(), PearsonR(); \n                    standardized=true, fstat=flip, switch2rand=1)\n\n# the same using 5000 random permutations\nT12_4 = _permMcTest!(Œº0œÉ1(x), [Œº0œÉ1(y) for y in Y], N, CrossProd(), PearsonR(); \n                    standardized=true, fstat=flip, switch2rand=1, nperm=5000)\n\nTo check more examples, see the multcompTests_API.jl unit located in the src github folder and function test_multicompTests() in the runtests.jl unit located in the test github folder.\n\n\n\n\n\n","category":"function"},{"location":"create your own test/#PermutationTests.flip","page":"Create your own test","title":"PermutationTests.flip","text":"flip(x::Bool)\n\nflip(x::Union{R, I}) where {R<:Real, I<:Int}\n\nInvert the sign of a real number or integer and negate a boolean. \n\nThis function may be needed for argument fstat to call _permTest! or _permMcTest! if you  create your own test - see the example on how to create a test for the Chatterjee correlation.\n\nIt can also be useful when you create a new test in the code you deveolop for computing your own test statistics. \n\n\n\n\n\n","category":"function"},{"location":"create your own test/#PermutationTests.membership","page":"Create your own test","title":"PermutationTests.membership","text":"function membership(stat::IndSampStatistic, ns::Vector{Int})\n\nCreate the appropriate argument x to be used by functions _permTest! and _permMcTest! when you  create your own test using the permutation scheme of test statistics belonging  to the IndSampStatistic group.\n\nFor stat a IndSampStatistic, ns is a group numerosity vector, i.e., a vector of positive integers  [N1,...,NK], where K is the number of groups and N_k is the number of observations for the k^th group (see ns).  \n\nReturn the group membership vector [repeat (1, N1);...; repeat(K, Nk)]\n\nIf rev=reverse is passed as keyword argument, return instead group membership vector [repeat (K, N1);...; repeat(1, Nk)]. This is used to run t-tests for independent samples using the PearsonR() Statistic, see for example studentTestIS.\n\nExamples\n\nusing PermutationsTests\nmembership(AnovaF_IS(), [3, 4])\n# return the vector [1, 1, 1, 2, 2, 2, 2]\n\n\n\n\n\nfunction membership(stat::RepMeasStatistic, ns::@NamedTuple{n::Int, k::Int})\n\nCreate the appropriate argument x to be used by functions _permTest! and _permMcTest! when you  create your own test using the permutation scheme of test statistics belonging  to the RepMeasStatistic group.\n\nFor stat a RepMeasStatistic, ns is a named tuple, such as (n=N, k=K), where N is the number of observations (e.g., subjects) and K the number of measurements (or treatments, times, ect.), see ns.\n\nReturn collect(1:N*K).\n\nExamples\n\nusing PermutationsTests\nmembership(AnovaF_RM(), (n=2, k=4))\n# return the vector [1, 2, 3, 4, 5, 6, 7, 8]\n\n\n\n\n\nfunction membership(stat::OneSampStatistic, ns::Int)\n\nCreate the appropriate argument x to be used by functions _permTest! and _permMcTest! when you  create your own test using the permutation scheme of test statistics belonging  to the OneSampStatistic group.\n\nFor stat a OneSampStatistic, ns is the number of observations (e.,g., subjects) given as an integer, see ns.\n\nReturn ones(Int, ns).\n\nExamples\n\nusing PermutationsTests\nmembership(Sum(), 5)\n# return the vector [1, 1, 1, 1, 1]\n\n\n\n\n\n","category":"function"},{"location":"create your own test/#PermutationTests.testStatistic","page":"Create your own test","title":"PermutationTests.testStatistic","text":"\n# METHOD 1\nfunction testStatistic(x, y, stat::mystat, fstat::Function; \n                        cpcd=nothing, kwargs...)\n\n# METHOD 2\nfunction testStatistic(x, Y, i::Int, stat::mystat, fstat::Function; \n                        cpcd=nothing, kwargs...)\n                        \n        where mystat<:Statistic \n\nCompute the observed and permuted test statistic for univariate tests (Method 1) or the i^th  observed and permuted test statistic for the i^th hypothesis, with i=1M,  for multiple comparisons permutation tests (Method 2).\n\nIf you create your own test you will write new methods for these functions taking as stat a test statistic of type Statistic you have declared.\n\nIf not, you never need these functions.\n\nY is a vector of elements (typically, vectors themelves) and the test-statistic is to be computed on Y[i], using the permutation vector x.\n\nFor the fstat and cpcd argument, see how to create your own test.\n\n\n\n\n\n","category":"function"},{"location":"PermutationTests/#Main-module","page":"Main Module","title":"Main module","text":"","category":"section"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"Here below are the types declared in the package that you may need to use.","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"","category":"page"},{"location":"PermutationTests/#TestDirection","page":"Main Module","title":"TestDirection","text":"","category":"section"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"abstract type TestDirection end ","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"This is the abstract type for the three possible test directionalities. Instances of this type are julia singletons and are used as arguments of test functions.","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"Type Test Directionality\nBoth bi-directional test (default for all tests)\nRight right-tailed test\nLeft left-tailed test","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"","category":"page"},{"location":"PermutationTests/#Assignment","page":"Main Module","title":"Assignment","text":"","category":"section"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"abstract type Assignment end","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"This is the abstract type for the two possible test designs. Instances of this type are julia singletons. The test design is determined automatically by the test functions and is one of the field of the structure returned by the test functions.","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"Type Test Design\nBalanced equal number of subjects in all groups/tratments/blocks...\nUnbalanced unequal number of subjects in the groups/tratments/blocks...","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"","category":"page"},{"location":"PermutationTests/#TestResult","page":"Main Module","title":"TestResult","text":"","category":"section"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"abstract type TestResult end","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"This is the abstract type for the structures returned by all test functions.","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"","category":"page"},{"location":"PermutationTests/#UniTest","page":"Main Module","title":"UniTest","text":"","category":"section"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"All functions carrying out univariate tests return the following structure of type TestResult:","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"struct UniTest <: TestResult\n    p::Float64\n    stat::statistic where statistic <: Statistic\n    obsstat::Float64 \n    minp::Float64 \n    nperm::Int64 \n    testtype::Symbol \n    direction::testDirection where testDirection <: TestDirection\n    design::assignment where assignment <: Assignment\nend    \n","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"Fields:","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":".p: the p-value of the test. \n.stat: the actual test-statistic that has been used as a singleton, see Statistic. \n.obsstat: observed statistic, the value of the test-statistic .stat for the input data. \n.nperm: the number of permutations used to obtain the p-value. \n.minp: the minimum attainable p-value, given by 1 / nperm. \n.testtype: either :exact or :approximate, depending on whether all possible or a random number of permutations, respectively, have been used. \n.direction: the test-directionality set by the user as a singleton, see TestDirection. \n.design: the test design, as established by the test function as a singleton, see Assignment. ","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"","category":"page"},{"location":"PermutationTests/#MultcompTest","page":"Main Module","title":"MultcompTest","text":"","category":"section"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"All functions carrying out multiple comparisons tests return the following structure of type TestResult:","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"struct MultcompTest <: TestResult\n    p::Vector{Float64} \n    stat::statistic where statistic <: Statistic\n    obsstat::Vector{Float64} \n    minp::Float64 \n    nperm::Int64 \n    testtype::Symbol \n    direction::testDirection where testDirection <: TestDirection\n    design::assignment where assignment <: Assignment\n    nulldistr::Vector{Float64}\n    rejections::Vector{Vector{Int64}} \n    stepdown::Bool \n    fwe::Float64\nend    ","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"Fields:","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"The fields .stat, .minp, .nperm,.testtype, .direction and .design are the same as per the UniTest test result structure. ","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"For the others, special to multiple comparisons tests, say the test concerned M multiple-comparisons hypotheses, used P permutations and the step down procedure performed S steps. S will be equal to one if the step down procedure is not used or if it stops after the first step:","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":".p: the vectors of M p-values of the test. \n.obsstat: observed statistics, the values of the M test-statistics .stat for the input data. \n.nulldistr: if S is equal to 1 this is the vector holding the null-distribution of the test-statistic computed by data permutation, otherwise it is the vector holding the null-distribution obtained at the last step of the step down procedure.  \n.rejections: a vector holding S vectors, each one holding the indeces of the hypotheses that have been rejected at the corresponding step of the step down procedure. \n.stepdown: true if the step down procedure has been used, false otherwise. \n.fwe: the family-wise error rate set by the user. This is used only if .stepdown is true. By default it is fixed to 0.05 for all multiple comparisons tests.","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"","category":"page"},{"location":"PermutationTests/#Statistic","page":"Main Module","title":"Statistic","text":"","category":"section"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"abstract type Statistic end","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"This is the abstract type for all test statistics. This type is useful if you want to create your own test. If you don't, you can skip the rest of this page. ","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"All test-statistic are julia singletons, that is, immutable composite type (struct) with no fields. For each typical test-statistic used for paramtric tests, there exist an associated equivalent test-statistic that gives the same p-value with a particular univariate permutation test. This happens because the test-statistic can usually be decomposed in several terms, some of which are invariant to data permutation for a given test directionality (see TestDirection) and/or test design (see Assignment). ","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"Univariate tests in Permutations.jl make use of this equivalence to always yield the fastest test possible. In the following table, we list the usual test-statistic used for parametric tests in bold and the equivalent test-statistic used for univariate permutation tests just below, along with the test directionality and/or test design for which they apply. ","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"Test-statistic Type When it applies\nPearson correlation coefficient r PearsonR always\nCross Product CrossProd directional test*\nCovariance Covariance bi-directional test\n1-way ANOVA for independent samples F AnovaF_IS always\nSum of group totals squared SumGroupTotalsSq_IS balanced design\nSum of group totals squared/N SumGroupTotalsSqN_IS always\nStudent t for independent samples StudentT_IS always\nSum of group totals squared Group1Total_IS directional\nSum of group totals squared/N SumGroupTotalsSqN_IS bi-directional test\n1-way ANOVA for repeated measures F AnovaF_RM always\nSum of treatement totals squared SumTreatTotalsSq_RM always\nOne-sample Stedent t StudentT_1S always\nSum of observations Sum always\n  * always if the data is standardized","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"The equivalent statistic that has been employed for a given univariate test is returned as one of the field of the test result.","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"To know a-priori what equivalent statistic will be used for a test, see eqStat.","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"Note that equivalent statistics are not used for multiple comparisons tests, as they are not dimensionless and their use could unduly favor some hypotheses over others.","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"Test statistics are computed internally by the test functions of the package. If you need to compute them for other purposes, see the page on test statistics.","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"","category":"page"},{"location":"PermutationTests/#Statistic-groups","page":"Main Module","title":"Statistic groups","text":"","category":"section"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"All implemented test-statistics are grouped in four union types:","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"BivStatistic : all bivariate test-statistics\nIndSampStatistic : all indepedent samples test-statistics\nRepMeasStatistic : all repeated measures test-statistics\nOneSampStatistic : all one-sample test-statistics, actually a special case of RepMeasStatistic.","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"Regardless the actual test-statstic used in the permutation test, the union type it belongs to indicates  the permutation scheme it is subjected to,  which in turn determines the number of possible data permutations. The test statistics composing the four groups are listed in the table here below:","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"BivStatistic IndSampStatistic RepMeasStatistic OneSampStatistic\nPearsonR AnovaF_IS AnovaF_RM StudentT_1S\nCrossProd SumGroupTotalsSq_IS SumTreatTotalsSq_RM Sum\nCovariance SumGroupTotalsSqN_IS  \n StudentT_IS  \n Group1Total_IS  \n SumGroupTotalsSqN_IS  ","category":"page"},{"location":"PermutationTests/","page":"Main Module","title":"Main Module","text":"\n# Singletons\nStudentT_1S() isa IndSampStatistic # false\n\nStudentT_1S() isa OneSampStatistic # true\n\nStudentT_1S() isa StudentT_1S # true\n\n# These are types instead and are never used as such\nStudentT_1S <: IndSampStatistic # false\n\nStudentT_1S <: OneSampStatistic # true","category":"page"},{"location":"about/#About","page":"About","title":"About","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"","category":"page"},{"location":"about/#About-the-code","page":"About","title":"About the code","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"PermutationTests.jl includes seven code units (.jl files):","category":"page"},{"location":"about/","page":"About","title":"About","text":"Unit Description\nPermutationTests.jl Main module, declaration of constants, types and structuress\nstats.jl Low-level computations for statistics and test-statistic\ntools.jl General tools\nuniTests.jl Univariate tests\nuniTests_API.jl API for univariate tests\nmultcompTests.jl Multiple comparisons tests\nmultcompTests_API.jl API for multiple comparisons tests","category":"page"},{"location":"about/","page":"About","title":"About","text":"In addition, units for running benchmarks, error control tests and power analysis can be found in the src\\extras folder.","category":"page"},{"location":"about/","page":"About","title":"About","text":"A unit to test the main functions is available as well in the  test folder.","category":"page"},{"location":"about/","page":"About","title":"About","text":"","category":"page"},{"location":"about/#About-the-authors","page":"About","title":"About the authors","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"Marco Congedo, corresponding author and developer of the package, is a Research Director of CNRS (Centre National de la Recherche Scientifique), working at UGA (University of Grenoble Alpes, France). Contact: first name dot last name at gmail dot com","category":"page"},{"location":"about/","page":"About","title":"About","text":"Livio Finos, is Full professor at the  Department of Statistical Sciences of Univerit√† di Padova, Italy. Contact: first name dot last name at unipd dot it","category":"page"},{"location":"about/","page":"About","title":"About","text":"","category":"page"},{"location":"about/#Disclaimer","page":"About","title":"Disclaimer","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This version has been roughly tested. Independent reviewers for both the code and the documentation are welcome.","category":"page"},{"location":"about/","page":"About","title":"About","text":"","category":"page"},{"location":"about/#TroubleShoothing","page":"About","title":"TroubleShoothing","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"Problem Solution\nFolds.jl does not work properly for future versions of julia use keyword argument threaded=false for multiple comparison tests","category":"page"},{"location":"about/","page":"About","title":"About","text":"","category":"page"},{"location":"about/#Other-relevant-packages","page":"About","title":"Other relevant packages","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"HypothesisTests.jl\nStaticPermutations.jl\nBitPermutations.jl","category":"page"},{"location":"about/","page":"About","title":"About","text":"","category":"page"},{"location":"about/#References","page":"About","title":"References","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"R.A. Fisher (1935) The Design of Experiments, Hafner.","category":"page"},{"location":"about/","page":"About","title":"About","text":"E.S. Edgington (1995), Randomization Tests, Marcel Dekker Inc.","category":"page"},{"location":"about/","page":"About","title":"About","text":"A.P. Holmes, R.C. Blair, J.D.G Watson, I. Ford (1996) Non-Parametric Analysis of Statistic Images From Functional Mapping Experiments. Journal of Cerebral Blood Flow and Metabolism 16:7-22.","category":"page"},{"location":"about/","page":"About","title":"About","text":"F. Pesarin (2001) Multivariate Permutation Tests with applications in Biostatistics. John Wiley & Sons.","category":"page"},{"location":"about/","page":"About","title":"About","text":"E. J. G. Pitman (1937) Significance tests which may be applied to samples from any population, Royal Statistical Society Supplement, 4: 119-130 and 225-32 (parts I and II). ","category":"page"},{"location":"about/","page":"About","title":"About","text":"E. J. G. Pitman (1938) Significance tests which may be applied to samples from any population. Part III. The analysis of variance test. Biometrika. 29 (3‚Äì4): 322‚Äì335.","category":"page"},{"location":"about/","page":"About","title":"About","text":"P.H. Westfall, S.S. Young (1993) Resampling-Based Multiple Testing: Examples and Methods for P-Value Adjustment, John Wiley & Sons.","category":"page"},{"location":"about/","page":"About","title":"About","text":"A.M. Winkler, M.A. Webster, J.C. Brooks, et al. (2016) Non-parametric combination and related permutation tests for neuroimaging. Human Brain Mapping, 37(4):1486-511.","category":"page"},{"location":"about/","page":"About","title":"About","text":"","category":"page"},{"location":"about/#Contents","page":"About","title":"Contents","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"    Pages =  [\n        \"index.md\",\n        \"about.md\",\n        \"PermutationTests.md\",\n        \"univariate tests.md\",\n        \"multiple comparisons tests.md\",\n        \"package tests.md\",\n        \"tools.md\",\n        \"statistics.md\",\n        \"test statistics.md\",\n        \"create your own test.md\",\n        \"chose a test.md\"\n    ]\nDepth = 2","category":"page"},{"location":"about/","page":"About","title":"About","text":"","category":"page"},{"location":"about/#Index","page":"About","title":"Index","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"","category":"page"},{"location":"multiple comparisons tests/#Multiple-comparisons-tests","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"With a multiple comparisons test M null hypotheses are tested simultaneously.  By deriving the null distribution with the max-statistic approach, the following permutation tests control the family-wise error (FWE) rate, that is, the probability to commit one or more Type I error at the nominal level:","category":"page"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#Multiple-comparisons-test-functions","page":"Multiple comparisons tests","title":"Multiple comparisons test functions","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"test use function alias\nPearson correlation correlationMcTest rMcTest\nTrend correlation trendMcTest \nPoint bi-serial correlation pointBiSerialMcTest \nStudent's t for independent samples studentMcTestIS tMcTestIS\n1-way ANOVA for independent samples anovaMcTestIS fMcTestIS\nChi-squared chiSquaredMcTest Œß¬≤McTest\nFisher exact fisherExactMcTest \nStudent's t for repeated measures studentMcTestRM tMcTestRM\n1-way ANOVA for repeated measures anovaMcTestRM fMcTestRM\nCochran Q cochranqMcTest qMcTest\nMcNemar mcNemarMcTest \nOne-sample Student's t studentMcTest1S tMcTest1S\nSign test signMcTest ","category":"page"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"You may also find useful the tests we have created as examples of how to create new tests:","category":"page"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"Test\nAutocorrelation\nChatterjee correlation\nDistance correlation","category":"page"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"For creating other tests, see Create your own test.","category":"page"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"For univariate tests, see Univariate tests.","category":"page"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#Common-kwargs-for-multiple-comparisons-tests","page":"Multiple comparisons tests","title":"Common kwargs for multiple comparisons tests","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"The following optional keyword arguments are common to all multiple comparisons test functions:","category":"page"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"direction: an instance of TestDirection, either Right(), Left() or Both(). The default is Both(). \nnperm: an integer providing the number of random permutations to be used for an approximate test. It defaults to 20000. \nswitch2rand: an integer setting the upper limit of permutations to be listed exhaustively. It defaults to 1e8. If the number of possible permutations exceeds switch2rand, the approximate test with nperm random permutations will be performed, otherwise an exact test with all possible permutations will be performed. In order to force an approximate test, set switch2rand to a small integer such as 1. In order to know the number of possible permutations, see nrPerms. \nseed: an integer. It applies only to approximate tests. Set to 0 to use a random seed for generating random permutations. Any natural number results instead in a reproducible test. It defaults to 1234. \nverbose: a boolean. Print some information in the REPL while running the test. Set to false if you run benchmarks. The default is true.\nstepdown : a boolean. If true (default) the step-down procedure is used. This is at least as powerfu as the standard procedure and still controls the FWE.\nfwe : a real number in (0, 1). This is used by the step-down prcedure to control the family-wise error (FWE) rate at this level. By default it is 0.05.\nthreaded : a boolean. If true (default) some computations are multi-threaded if the product of the number of hypotheses, observations, and permutations exceed 500 millions.","category":"page"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#Multiple-comparisons-tests-API","page":"Multiple comparisons tests","title":"Multiple comparisons tests API","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#Correlation-test","page":"Multiple comparisons tests","title":"Correlation test","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"correlationMcTest\ncorrelationMcTest!","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.correlationMcTest","page":"Multiple comparisons tests","title":"PermutationTests.correlationMcTest","text":"function correlationMcTest(x::UniData, Y::UniDataVec;\n            direction::TestDir = Both(),\n            switch2rand::Int = max(Int(1e8) √∑ length(ùêò), Int(1e4)), \n            nperm::Int = 20_000, \n            seed::Int = 1234, \n            verbose::Bool = true, \n            #\n            standardized::Bool = false,\n            #\n            stepdown::Bool = true,\n            fwe::Float64 = 0.05,\n            threaded::Bool = Threads.nthreads()>=4) where TestDir <: TestDirection\n\nMultiple comparisons Pearson product-moment correlation test  by data permutation. \n\nRun M correlation tests simultaneously.  The input data are a fixed vector x and M vectors given as Y, a vector of M vectors y_1y_M. \n\nx and all vectors in Y must have equal length. \n\nThe M null hypotheses have form \n\nH_0(m)r_(x y_m)=0 quad m=1M, \n\nwhere r_xy_m is the Pearson correlation coefficient between vector x and the m^th vector of Y.\n\nFor optional keyword arguments, direction, switch2rand, nperm, seed, verbose, stepdown, fwe and threaded, see here.\n\nIf standardized is true, both x and all vectors of Y are assumed standardized (zero mean and unit standard deviation). With standardized input data the test can be executed faster as in this case the cross-product is actually the correlation.  If standardized is false, the data will be standardized to execute a faster test.\n\nDirectional tests, permutation scheme and number of permutations for exact tests: as per  univariate version correlationTest\n\nAliases: rMcTest, trendMcTest \n\nReturn a MultcompTest structure.\n\nExamples\n\nusing PermutationTests\nN=10; # number of observations\nM=100; # number of tests\nx=randn(N);\nY=[randn(N) for i=1:M];\nt=rMcTest(x, Y) # bi-directional test\n\ntR=rMcTest(x, Y; direction=Right()) # right-directional test\ntL=McTest(x, Y; direction=Left()) # left-directional test\ntMC=rMcTest(x, Y; switch2rand=1) # Force a monte carlo test\n# Force a monte carlo test and performs 50K permutations\nt5K=rMcTest(x, Y; switch2rand=1, nperm= 50_000) \ntnoSD=rMcTest(x, Y; stepdown=false) # don't do stepdown\ntnoMT=rMcTest(x, Y; threaded=false) # don't run it multithreaded\nt001=rMcTest(x, Y; fwe=0.01) # stepdown rejects at 0.01 level instead of 0.05\n\nSimilar tests\n\nSee correlationTest\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/#PermutationTests.correlationMcTest!","page":"Multiple comparisons tests","title":"PermutationTests.correlationMcTest!","text":"function correlationMcTest!(<same args and kwargs as `correlationMcTest`>)\n\nAs correlationMcTest, but x is overwritten if standardized is true. \n\nAliases: rMcTest!, trendMcTest!\n\nUnivariate version:  correlationTest!\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#Trend-test","page":"Multiple comparisons tests","title":"Trend test","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"trendMcTest\ntrendMcTest!","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.trendMcTest","page":"Multiple comparisons tests","title":"PermutationTests.trendMcTest","text":"function trendMcTest(<same args and kwargs as correlationMcTest>)\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/#PermutationTests.trendMcTest!","page":"Multiple comparisons tests","title":"PermutationTests.trendMcTest!","text":"function trendMcTest!(<same args and kwargs as correlationMcTest!>)\n\nActually aliases of correlationMcTest and correlationMcTest!, respectively. \n\nx is any specified trend (linear, polynomial, exponential, logarithmic, trigonometric, ...) and Y holds the observed data. A multiple comparison Pearson product-moment correlation  test between x and all M vectors in Y is then carried out. \n\nDirectional tests, permutation scheme and number of permutations for exact tests: as per  univariate versions trendTest or trendTest!\n\nBoth methods return a MultcompTest structure.\n\nExamples\n\nusing PermutationTests\n# We are goint to test an upward linear trend\nN=10\nM=100\nx=Float64.(collect(Base.OneTo(N))) # [1, 2,..., N]\n# out of the M vectors created here below, only one has a significant correlation\nY=[[1., 2., 4., 3., 5., 6., 7., 8., 10., 9.], ([randn(N) for m=1:M-1]...)];\n# Since we expect an upward linear trend, the correlation is expected to be positive,\n# hence we use a right-directional test to increase the power of the test.\nt = trendMcTest(x, Y; direction=Right()) \n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#Point-bi-serial-correlation-test","page":"Multiple comparisons tests","title":"Point bi-serial correlation test","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"pointBiSerialMcTest","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.pointBiSerialMcTest","page":"Multiple comparisons tests","title":"PermutationTests.pointBiSerialMcTest","text":"function pointBiSerialMcTest(<same args and kwargs as `studentMcTestIS`>)\n\nActually an alias for studentMcTestIS.\n\nRun M point bi-serial correlation tests simultaneously. The correlations are between the M input data vectors y_1y_M given as argument Y,  all holding N=N_1+N_2 elements, and a vector x, internally created, with the first N_1 elements equal to 1 and the remaining N_2 elements equal to 2.\n\nIf you need to use other values for the dicothomous variable x or a different order for its elements,  use correlationMcTest instead. \n\nThe M null hypotheses have form \n\nH_0(m) b_(xy_m)=0 quad m=1M,\n\nwhere b_(xy_m) is the point bi-serial correlation between y_m (the m^th input data vectors in Y)  and the internally created vector x.\n\nDirectional tests, permutation scheme and number of permutations for exact tests: as per univariate version pointBiSerialTest\n\nReturn a MultcompTest structure.\n\nExamples\n\nusing PermutationTests\nns=[4, 6]; # N1=4, N2=6\nN=sum(ns); # number of observations\n\nY = [rand(N) for m=1:M]; # some Gaussian data as example\n# implicitly, the point bi serial correlation is between \n# y1,...,yM and x=[1, 1, 1, 1, 2, 2, 2, 2, 2, 2]\nt=pointBiSerialMCTest(Y, ns) # by default the test is bi-directional\n\ntR=pointBiSerialMCTest(Y, ns; direction=Right()) # right-directional test\ntL=pointBiSerialMCTest(Y, ns; direction=Left()) # left-directional test\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#Student's-t-test-for-independent-samples","page":"Multiple comparisons tests","title":"Student's t-test for independent samples","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"studentMcTestIS","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.studentMcTestIS","page":"Multiple comparisons tests","title":"PermutationTests.studentMcTestIS","text":"# METHOD (1)\nfunction studentMcTestIS(Y::UniDataVec, ns::IntVec;\n                direction::TestDir = Both(),\n                switch2rand::Int = max(Int(1e8) √∑ length(ùêò), Int(1e4)),\n                nperm::Int = 20_000, \n                seed::Int = 1234, \n                verbose::Bool = true,\n                #\n                stepdown::Bool = true,\n                fwe::Float64 = 0.05,\n                threaded::Bool = Threads.nthreads()>=4,\n                asPearson::Bool = true) where TestDir <: TestDirection\n\n\n\n\n\n# METHOD (2)\nfunction studentMcTestIS(Yvec::UniDataVec¬≤; <same kwargs>)\n\n\n\n\n\n# METHOD (3)\nfunction studentMcTestIS(X::UniDataVec, Y::UniDataVec; <same kwargs>)\n\nMETHOD (1)\n\nMultiple comparisons Student's t-test for independent samples  by data permutation. \n\nRun M t-tests simultaneously. Given M hypotheses with N=N_1+N_2 observations for two groups each,  the M null hypotheses have form\n\nH_0(m) Œº_m1=Œº_m2 quad m=1M,\n\nwhere Œº_m1 and Œº_m2 are the mean of group 1 and group 2, respectively, for the m^thhypothesis. \n\nFor a bi-directional test, this t-test is equivalent to the 1-way ANOVA for two independent samples. However, in contrast to the ANOVA, it can be directional. \n\nns is a vector of integers holding the group numerosity N_1 N_2 (see examples below).\n\nFor optional keyword arguments, direction, switch2rand, nperm, seed, verbose, stepdown, fwe and threaded see here. \n\nIf asPearson is true(default), the test is run as an equivalent version of a Pearson correlation test. This is in general advantageous for multiple comparison tests, especially if approximate (see the benchmarks). If you seek best performance for exact tests, benchmark the speed of the test with asPearson set to true and to false to see what version is faster for your data. \n\nnote: nota\nIf asPearson is true, the .stat field of the test result will actually be CrossProd(), as the data will be standardized before running the test. See correlationTest.\n\nDirectional tests, permutation scheme and number of permutations for exact tests: as per univariate version studentTestIS\n\nAliases: tTestMcIS, pointBiSerialMcTest\n\nReturn a MultcompTest structure.\n\nMETHOD (2)\n\nAs method (1), but input data Yvec is a vector containing M pairs of vector of arbitrary length,  holding in the natural order the data corresponding to the m^th hypothesis for group 1 and group 2, respectively.\n\nMETHOD (3)\n\nAs method (1), but input data X and Y holds M vectors of observations each, X corresponding to data  for group 1 and Y corresponding to data for group 2.  The M vectors in X must have all the same length (N_1), so must the M vectors in Y (N_2). \n\nExamples\n\n# (1)\nusing PermutationTests\nM=100 # number of hypotheses\nns=[4, 5] # number of observations in group 1 and group 2 (N1 and N2)\nN=sum(ns) # total number of observations\nYvec = [[randn(n) for n in ns] for m=1:M]; # some random Gaussian data for example \nY=[vcat(yvec...) for yvec in Yvec];\nt = tMcTestIS(Y, ns) # by default the test is bi-directional\n\n# Force an approximate test with 10000 random permutations\ntapprox = tMcTestIS(Y, ns; switch2rand=1, nperm=10000) \ntR=tMcTestIS(Y, ns; direction=Right()) # right-directional test\ntL=tMcTestIS(Y, ns; direction=Left()) # left-directional test\n\n# with a bi-directional test, t is equivalent to a 1-way ANOVA for independent samples\ntanova= fMcTestIS(Y, ns) \nprintln(sum(abs.(t.p - tanova.p)) ‚âà 0. ? \"OK\" : \"error\")\n\n# do not run it using the CrossProd test statistic\ntcor = tMcTestIS(Y, ns; asPearson=false) \n\n# in method (2) only the way the input data is formatted is different \nt2 = tMcTestIS(Yvec)\nprintln(sum(abs.(t.p - t2.p)) ‚âà 0. ? \"OK\" : \"error\")\n\n# in method (3) also, only the way the input data is formatted is different \nt3 = tMcTestIS([Yvec[m][1] for m=1:M], [Yvec[m][2] for m=1:M])\nprintln(sum(abs.(t.p - t3.p)) ‚âà 0. ? \"OK\" : \"error\")\n\nSimilar tests\n\nSee studentTest1S\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#1-way-ANOVA-for-independent-samples","page":"Multiple comparisons tests","title":"1-way ANOVA for independent samples","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"anovaMcTestIS","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.anovaMcTestIS","page":"Multiple comparisons tests","title":"PermutationTests.anovaMcTestIS","text":"# METHOD (1)\nfunction anovaMcTestIS(Y::UniDataVec, ns::IntVec;\n                direction::TestDir = Both(),\n                switch2rand::Int = max(Int(1e8) √∑ length(ùêò), Int(1e4)),\n                nperm::Int = 20_000, \n                seed::Int = 1234, \n                verbose::Bool = true,\n                #\n                stepdown::Bool = true,\n                fwe::Float64 = 0.05,\n                threaded::Bool = Threads.nthreads()>=4) where TestDir <: TestDirection\n\n\n\n\n\n# METHOD (2)\nfunction anovaMcTestIS(ùêòvec::UniDataVec¬≤; <same kwargs>)\n\nMETHOD (1)\n\nMultiple comparisons 1-way analysis of variance (ANOVA) for independent samples  by data permutation. \n\nRun M ANOVAs simultaneously. The Input data is given as a vector Y holding M vectors ùê≤1ùê≤M concatenating all observations, that is, holding each N=N_1++N_K observations  for K2 independent samples (groups). The observations are ordered with group 1 first, then group 2,..., finally group K. Note that the group numerosity N_1N_K must be the same for all M hypotheses.  The only check performed is that the first vector in Y contains sum(ns) elements.\n\nThe M null hypotheses have form\n\nH_0(m) Œº_m1= ldots =Œº_mK quad m=1M,\n\nwhere Œº_mk is the mean of the k^th group for the m^th hypothesis.\n\nns is a vector of integers holding the group numerosity N_1N_K (see examples below).\n\nFor optional keyword arguments, direction, switch2rand, nperm, seed, verbose, stepdown, fwe and threaded see here.\n\nDirectional tests, permutation scheme and number of permutations for exact tests: as per univariate version anovaTestIS\n\nAlias: fMcTestIS\n\nReturn a MultcompTest structure.\n\nMETHOD (2)\n\nAs method (1), but input data Yvec is a vector holding M vectors of K vectors of  observations for group 1,..., group K. \n\nExamples\n\n# method (1)\nusing PermutationTests\nns=[3, 4, 5] # number of observations in group 1, 2 and 3\nM=10 # number of hypotheses\nYvec = [[randn(n) for n in ns] for m=1:M]; # some random Gaussian data for example \nt = fMcTestIS([vcat(y...) for y in Yvec], ns) # ANOVA tests are always bi-directional\n\n# Force an approximate test with 5000 random permutations\ntapprox = fMcTestIS([vcat(y...) for y in Yvec], ns; switch2rand=1, nperm=5000) \n\n# in method (2) only the way the input data is formatted is different \nt2 = fMcTestIS(Yvec)\n# of course, method (1) and (2) give the same p-values\nprintln(sum(abs.(t.p-t2.p))‚âà0. ? \"OK\" : \"error\") \n\nSimilar tests\n\nSee anovaTestIS\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#Chi-squared-test","page":"Multiple comparisons tests","title":"Chi-squared test","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"chiSquaredMcTest","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.chiSquaredMcTest","page":"Multiple comparisons tests","title":"PermutationTests.chiSquaredMcTest","text":"function chiSquaredMcTest(tables::AbstractVector{Matrix{I}};\n            direction::TestDir = Both(),\n            switch2rand::Int = max(Int(1e8) √∑ length(ùêò), Int(1e4)), \n            nperm::Int = 20_000, \n            seed::Int = 1234, \n            verbose::Bool = true,            \n            #\n            stepdown::Bool = true,\n            fwe::Float64 = 0.05,\n            threaded::Bool = Threads.nthreads()>=4,\n            asPearson::Bool = true) \n                    where {I <: Int, TestDir <: TestDirection}\n\nMultiple comparisons chi-squared (chi^2) permutation test  for 2 cdot K contingency tables, where K is ‚â•2.  It tests simultaneously M contingency tables, which must all have same dimension and same column sums.\n\nThe M null hypotheses have form \n\nH_0(m) O_m=E_m, \\quad m=1...M``,\n\nwhere O_m and E_m are the observed and expected frequencies of the m^thcontingency table.\n\ntables is a vector of M contingency tables. See chiSquaredTest for more explanations.\n\nFor optional keyword arguments, direction, switch2rand, nperm, seed, verbose, stepdown, fwe and threaded see here.\n\nFor K=2 this function calls studentMcTestIS and pass to it also argument asPearson, otherwise calls anovaMcTestIS and argument asPearson is ignored.\n\nDirectional tests, permutation scheme and number of permutations for exact tests: as per univariate version chiSquaredTest\n\nAliases: Œß¬≤McTest, fisherExactMcTest\n\nReturn a [MultcompTest] structure.\n\nwarning: Warning\nFor K2, permutations of dicothomous tables may yield a null \"sum of squares within\",  thus an infinite F statistic for the ANOVA. In this case the .nulldistr field of the  returned structure will contain some julia Inf elements. This does not apply for the univariate  version of the test (chiSquaredTest), as in this case an equivalent statistic for the  ANOVA is used (see Statistic) and those statistics can never go to infinity. \n\nExamples\n\nusing PermutationTests\ntables=[[3 3 2; 0 0 1], [1 2 2; 2 1 1], [3 1 2; 0 2 1]];\nt=Œß¬≤McTest(tables) # the test is bi-directional\n\ntables=[[6 1; 2 5], [4 1; 4 5], [5 2; 3 4]]\ntR=fisherExactMcTest(tables; direction=Right()) \n# or tR=Œß¬≤Test(tables; direction=Right())\n\n# do not use PearsonR statistic\ntR_=fisherExactMcTest(tables; direction=Right(), asPearson=false) \n\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#Fisher-exact-test","page":"Multiple comparisons tests","title":"Fisher exact test","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"fisherExactMcTest","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.fisherExactMcTest","page":"Multiple comparisons tests","title":"PermutationTests.fisherExactMcTest","text":"function fisherExactMcTest(<same args and kwargs as `chiSquaredMcTest`>)\n\nActually an alias for chiSquaredMcTest. It can be used for 2x2 contingency tables. See chiSquaredTest for more explanations.\n\nUnivariate version: fisherExactTest\n\nReturn a MultcompTest structure.\n\nExamples\n\nusing PermutationTests\ntables=[[6 1; 2 5], [4 1; 4 5], [5 2; 3 4]];\ntR=fisherExactMcTest(tables; direction=Right()) \n# or tR=Œß¬≤Test(tables; direction=Right())\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#Student's-t-test-for-repeated-measures","page":"Multiple comparisons tests","title":"Student's t-test for repeated measures","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"studentMcTestRM\nstudentMcTestRM!","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.studentMcTestRM","page":"Multiple comparisons tests","title":"PermutationTests.studentMcTestRM","text":"function studentMcTestRM(<same args and kwargs as `studentMcTest1S`>)\n\nActually an alias for studentMcTest1S\n\nIn order to run a multiple comparisons t-test for repeated measure, use as data input the vector of  M vectors of differences across the two measurements (or treatments, time, etc.).\n\nDo not change the refmean default value. See studentMcTest1S for more details.\n\nDirectional tests, permutation scheme and number of permutations for exact tests: as per studentTest1S\n\nUnivariate version: studentTestRM\n\nAlias: tMcTestRM\n\nReturn a MultcompTest structure.\n\nExamples\n\nusing PermutationTests\nN=10 # number of observation per treatment\nM=100 # number of hypotheses\n\n# suppose you have data as\nY1=[randn(N) for m=1:M]; # measurement 1\nY2=[randn(N) for m=1:M]; # measurement 2\n\n# Let us compute the differences as\nY=[y1-y2 for (y1, y2) in zip(Y1, Y2)];\nt=tMcTestRM(Y) # by default the test is bi-directional\n\ntR=tMcTestRM(Y; direction=Both()) #  right-directional test\n# if test tR is significant for some hypotheses, \n# for these hypotheses the mean of measurement 1 \n# exceeds the mean of measurement 2.\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/#PermutationTests.studentMcTestRM!","page":"Multiple comparisons tests","title":"PermutationTests.studentMcTestRM!","text":"(2) function studentMcTestRM!(<same args and kwargs as studentMcTest1S!>)\n\nActually an alias for studentMcTest1S!.\n\nY is overwritten in the case of approximate (random permutations) tests.\n\nAlias: tMcTestRM!\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#1-way-ANOVA-for-repeated-measures","page":"Multiple comparisons tests","title":"1-way ANOVA for repeated measures","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"anovaMcTestRM","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.anovaMcTestRM","page":"Multiple comparisons tests","title":"PermutationTests.anovaMcTestRM","text":"# METHOD (1)\nfunction anovaMcTestRM(Y::UniDataVec, ns::@NamedTuple{n::Int, k::Int};\n            direction::TestDir = Both(),\n            switch2rand::Int = max(Int(1e8) √∑ length(ùêò), Int(1e4)),\n            nperm::Int = 20_000, \n            seed::Int = 1234, \n            verbose::Bool = true,\n            #\n            stepdown::Bool = true,\n            fwe::Float64 = 0.05,\n            threaded::Bool = Threads.nthreads()>=4) where TestDir <: TestDirection\n\n\n\n\n\n# METHOD (2)\nfunction anovaMcTestRM(Yvec::UniDataVec¬≤; <same kwargs>)\n\nMETHOD (1)\n\nMultiple comparison 1-way analysis of variance (ANOVA) for repeated measures  by data permutation. Given M hypotheses, each with N observation units (e.g., subjects, blocks, etc.)  for each of K repeated measures (e.g., treatments, time, etc.), the null hypotheses have form\n\nH_0(m) Œº_m1= ldots =Œº_mk quad m=1M,\n\nwhere Œº_mk is the mean of the k^th treatment for the m^th hypothesis. \n\nY is a vector hoding M vectors, each one concatenaning the observations for the K treatments  in the natural order, that is, the N observation for treatment 1, ...,  the N observations for treatment K. Thus, Y holds M vectors of N cdot K elements. \n\nns is a julia named tuple  with form (n=N, k=K) (see examples below).\n\nFor optional keyword arguments, direction, switch2rand, nperm, seed, verbose, stepdown, fwe and threaded see here. \n\nDirectional tests, permutation scheme and number of permutations for exact tests: as per univariate version anovaTestRM\n\nAlias: fTestMcRM\n\nReturn a MultcompTest structure.\n\nMETHOD (2)\n\nAs (1), but Yvec is a vector of M vectors, each one holding the K vectors of N observations.\n\nExamples\n\n# method (1)\nusing PermutationTests\nN=6 # number of observation units per treatment\nK=3 # number of treatments\nM=10 # number of hypotheses\nYvec = [[randn(N) for k=1:K] for m=1:M]; # some random Gaussian data for example \nt = fMcTestRM([vcat(yvec...) for yvec in Yvec], (n=N, k=K)) \n# ANOVA tests are always bi-directional\n\n# Force an approximate test with 5000 random permutations\ntapprox = fMcTestRM([vcat(yvec...) for yvec in Yvec], (n=N, k=K); \n            switch2rand=1, nperm=5000)\n\n# in method (2) only the way the input data is formatted is different \n \nt2 = fMcTestRM(Yvec)\nprintln(sum(abs.(t.p - t2.p)) ‚âà 0. ? \"OK\" : \"error\")\n\n\nSimilar tests\n\nSee anovaTestRM\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#Cochran-Q-test","page":"Multiple comparisons tests","title":"Cochran Q test","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"cochranqMcTest","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.cochranqMcTest","page":"Multiple comparisons tests","title":"PermutationTests.cochranqMcTest","text":"function cochranqMcTest(tables::AbstractVector{Matrix{I}};\n            direction::TestDir = Both(),\n            switch2rand::Int = max(Int(1e8) √∑ length(ùêò), Int(1e4)),\n            nperm::Int = 20_000, \n            seed::Int = 1234, \n            verbose::Bool = true,\n            #\n            stepdown::Bool = true,\n            fwe::Float64 = 0.05,\n            threaded::Bool = Threads.nthreads()>=4) \n                where {I <: Int, TestDir <: TestDirection}\n\nMultiple comparisons Cochran Q by data permutation. \n\nThe Cochran Q test is analogous to the 1-way ANOVA for repeated measures, but takes as input dicothomous  data (zeros and ones). Given M hypotheses, consisting each in N observation units  (e.g., subjects, blocks, etc.) and K repeated measures (e.g., treatments, time, etc.),  the null hypotheses have form\n\nH_0(m) Œº_m1= ldots =Œº_mk quad m=1M,\n\nwhere Œº_mk is the mean of the k^th treatment. \n\nInput tables is a vector of M tables of zeros and ones with size NxK, where N is the number  of observations and K the repeated measures. See cochranqTest for more explanations.\n\nFor optional keyword arguments, direction, switch2rand, nperm, seed, verbose, stepdown, fwe and threaded see here. \n\nDirectional tests, Permutation scheme and number of permutations for exact tests: as per univariate version cochranqTest\n\nAliases: qMcTest, mcNemarMcTest\n\nReturn a MultcompTest structure.\n\nExamples\n\nusing PermutationTests\ntables=[ [1 1 0; 1 0 0; 1 1 1; 1 1 0; 1 0 1; 1 1 0],\n        [1 0 0; 1 1 0; 1 1 0; 1 1 1; 1 0 0; 1 0 0],\n        [1 0 0; 0 0 1; 1 0 1; 1 1 0; 1 0 1; 1 0 0]];\nt=qMcTest(tables) # the test with K>2 can only be bi-directional\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#McNemar-test","page":"Multiple comparisons tests","title":"McNemar test","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"mcNemarMcTest","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.mcNemarMcTest","page":"Multiple comparisons tests","title":"PermutationTests.mcNemarMcTest","text":"function mcNemarMcTest(same args and kwargs as `cochranqMcTest`>)\n\nActually an alias for [cochranqMcTest)(@ref).\n\nRun M McNemar test simultaneously.\n\nInput tables is a vector of M tables of zeros and ones with size Nx2, where N is the number  of observations and 2 the number of repeated measures. See cochranqTest for more explanations.\n\nUnivariate version: mcNemarTest\n\nReturn a MultcompTest structure.\n\nExamples\n\nusing PermutationTests\ntables=[[1 1; 1 0; 1 0; 0 0; 1 0; 1 0],\n        [1 0; 1 1; 1 0; 0 1; 0 0; 1 0],\n        [0 1; 0 0; 1 0; 1 0; 1 0; 1 1]];\nt=mcNemarMcTest(tables) # by default the test is bi-directional\n\ntR=mcNemarMcTest(tables; direction=Right()) # right-directional test\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#One-sample-Student's-t-test","page":"Multiple comparisons tests","title":"One-sample Student's t-test","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"studentMcTest1S\nstudentMcTest1S!","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.studentMcTest1S","page":"Multiple comparisons tests","title":"PermutationTests.studentMcTest1S","text":"function studentMcTest1S(Y::UniDataVec;\n            refmean::Realo = nothing,\n            direction::TestDir = Both(),\n            switch2rand::Int = max(Int(1e8) √∑ length(ùêò), Int(1e4)),\n            nperm::Int = 20_000, \n            seed::Int = 1234, \n            verbose::Bool = true,\n            #\n            stepdown::Bool = true,\n            fwe::Float64 = 0.05,\n            threaded::Bool = Threads.nthreads()>=4) where TestDir <: TestDirection \n\nMultiple comparison one-sample t-test  by data permutation. \n\nRun M one-sample t-tests simultaneously. The null hypotheses have form \n\nH_0(m) Œº_m=Œº_0 quad m=1M,\n\nwhere Œº_m is the mean of the observations for the m^th hypothesis and Œº_0 is a reference  population mean.\n\nrefmean is the reference mean (Œº_0) above. The default is 0.0, which is the value needed in most situations.\n\nY is a vector of M vectors holding each the N observations which mean is to be compared to Œº_0.\n\nFor optional keyword arguments, direction, switch2rand, nperm, seed, verbose, stepdown, fwe and threaded see here. \n\nDirectional tests, permutation scheme and number of permutations for exact tests: as per univariate version studentTest1S\n\nAlias: tTest1S \n\nReturn a MultcompTest structure.\n\nExamples\n\nusing PermutationTests\nN=20 # number of observations\nM=100 # number of hypotheses\ny = [randn(N) for m=1:M]; # some random Gaussian data for example\nt = tMcTest1S(Y) # By deafult the test is bi-directional\n\ntR = tMcTest1S(Y; direction=Right()) # right-directional test\ntL = tMcTest1S(Y; direction=Left()) # Left-directional test\n\n# Force an approximate test with 5000 random permutations\ntapprox = tMcTest1S(Y; switch2rand=1, nperm=5000) \n\n# test H0m: Œº(ym)=1.5: all will be rejected as the expected mean is 0.0\nt1 = tMcTest1S(Y; refmean=1.5) \n\nSimilar tests\n\nSee studentTest1S\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/#PermutationTests.studentMcTest1S!","page":"Multiple comparisons tests","title":"PermutationTests.studentMcTest1S!","text":"function studentMcTest1S!(<same args and kwargs as `studentMcTest1S`>)\n\nAs studentMcTest1S, but Y is overwritten in the case of approximate (random permutations) tests.\n\nAlias: tTest1S! \n\nUnivariate version: studentTest1S!\n\n\n\n\n\n","category":"function"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"","category":"page"},{"location":"multiple comparisons tests/#Sign-test","page":"Multiple comparisons tests","title":"Sign test","text":"","category":"section"},{"location":"multiple comparisons tests/","page":"Multiple comparisons tests","title":"Multiple comparisons tests","text":"signMcTest","category":"page"},{"location":"multiple comparisons tests/#PermutationTests.signMcTest","page":"Multiple comparisons tests","title":"PermutationTests.signMcTest","text":"function signMcTest(Y::Union{AbstractVector{BitVector}, AbstractVector{Vector{Bool}}};\n            direction::TestDir = Both(),\n            switch2rand::Int= max(Int(1e8) √∑ length(ùêò), Int(1e4)),\n            nperm::Int = 20_000, \n            seed::Int = 1234, \n            verbose::Bool = true,\n            #\n            stepdown::Bool = true,\n            fwe::Float64 = 0.05,\n            threaded::Bool = Threads.nthreads()>=4) where TestDir <: TestDirection\n\n\nMultiple comparisons sign test by data permutation. \n\nRun M sign tests simultaneously.The null hypotheses have form \n\nH_0(m) E_m(true)=E_m(false) quad m=1M,\n\nwhere E_m(true) and E_m(false) are the expected number of true and false occurrences, respectively, in the m^th hypothesis.\n\nY ia a vector of M vectors holding each N booleans.\n\nFor optional keyword arguments, direction, switch2rand, nperm, seed, verbose, stepdown, fwe and threaded see here. \n\nDirectional tests, permutation scheme and number of permutations for exact tests: as per  univariate version signTest\n\nReturn a MultcompTest structure.\n\nExamples\n\nusing PermutationTests\nN=20; # number of observations\nM=100; # number of hypotheses\nY = [rand(Bool, N) for m=1:M]; # some random Gaussian data for example\nt = signMcTest(Y) # By deafult the test is bi-directional\n\ntR = signMcTest(Y; direction=Right()) # right-directional test\ntL = signMcTest(Y; direction=Left()) # Left-directional test\n\n# Force an approximate test with 5000 random permutations\ntapprox = signMcTest(Y; switch2rand=1, nperm=5000) \n\n\n\n\n\n","category":"function"},{"location":"univariate tests/#Univariate-tests","page":"Univariate tests","title":"Univariate tests","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"They are used when a single null hypothesis is to be tested. The following tests are available.","category":"page"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#Univariate-test-functions","page":"Univariate tests","title":"Univariate test functions","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"Test Function Alias\nPearson correlation correlationTest rTest\nTrend correlation trendTest \nPoint bi-serial correlation pointBiSerialTest \nStudent's t for independent samples studentTestIS tTestIS\n1-way ANOVA for independent samples anovaTestIS fTestIS\nChi-squared chiSquaredTest Œß¬≤Test\nFisher exact fisherExactTest \nStudent's t for repeated measures studentTestRM tTestRM\n1-way ANOVA for repeated measures anovaTestRM fTestRM\nCochran Q cochranqTest qTest\nMcNemar mcNemarTest \nOne-sample Student's t studentTest1S tTest1S\nSign signTest ","category":"page"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"You may also find useful the tests we have created as examples of how to create new tests:","category":"page"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"Test\nAutocorrelation\nChatterjee correlation\nDistance correlation","category":"page"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"For creating other tests, see Create your own test.","category":"page"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"For multiple comparisons tests, see Multiple comparisons tests.","category":"page"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#Common-kwargs-for-univariate-tests","page":"Univariate tests","title":"Common kwargs for univariate tests","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"The following optional keyword arguments are common to all univariate test functions:","category":"page"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"direction: an instance of TestDirection, either Right(), Left() or Both(). The default is Both(). \nequivalent: a boolean. If true (default), the fastest equivalent statistic will be used. See Statistic. \nnperm: an integer providing the number of random permutations to be used for an approximate test. It defaults to 20000. \nswitch2rand: an integer setting the upper limit of permutations to be listed exhaustively. It defaults to 1e8. If the number of possible permutations exceeds switch2rand, the approximate test with nperm random permutations will be performed, otherwise an exact test with all possible permutations will be performed. In order to force an approximate test, set switch2rand to a small integer such as 1. In order to know in advance the number of possible permutations, see nrPerms. \nseed: an integer. It applies only to approximate tests. Set to 0 to use a random seed for generating random permutations. Any natural number results instead in a reproducible test. It defaults to 1234. \nverbose: a boolean. Print some information in the REPL while running the test. Set to false if you run benchmarks. The default is true.","category":"page"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#Univariate-tests-API","page":"Univariate tests","title":"Univariate tests API","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#Correlation-test","page":"Univariate tests","title":"Correlation test","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"correlationTest\ncorrelationTest!","category":"page"},{"location":"univariate tests/#PermutationTests.correlationTest","page":"Univariate tests","title":"PermutationTests.correlationTest","text":"function correlationTest(x::UniData, y::UniData;\n            direction::TestDir = Both(),\n            equivalent::Bool = true,\n            switch2rand::Int = Int(1e8), \n            nperm::Int = 20_000, \n            seed::Int = 1234, \n            standardized::Bool = false, \n            centerd::Bool = false,\n            verbose::Bool = true) where TestDir <: TestDirection\n\nUnivariate Pearson product-moment correlation test  by data permutation. The null hypothesis has form \n\nH_0 r_(xy)=0,\n\nwhere r_(xy) is the correlation between the two input data vectors, x and y, typically real, both holding N observations.\n\nFor optional keyword arguments, direction, equivalent, switch2rand, nperm, seed and verbose,  see here.\n\nIf standardized is true, both x and y are assumed standardized (zero mean and unit standard deviation). Provided that the input data is standardized, the test provides the same p-value, however it can be executed faster as in this case the cross-product is equivalent to the Pearon r statistic (see Statistic).\n\nIf centered is true, both x and y are assumed centered (zero mean). The test provides the same p-value, however it can be executed faster if the test is bi-directional  as in this case the equivalent statistic, the covariance, reduces to the cross-product divided by N.\n\nIf neither standardized nor centered is true, the data will be standardized to execute a faster test using the cross-product as test-statistic.\n\nDirectional tests\n\nFor a right-directional test, the correlation is expected to be positive. A negative correlation will result in a p-value higehr then 0.5.\nFor a left-directional test, the correlation is expected to be negative. A positive correlation will result in a p-value higehr then 0.5.\n\nPermutation scheme: under the null hypothesis, the position of the observations in the data input vectors bears no meaning. The exchangeability scheme consists then in shuffling the observations of vector x or vector y. PermutationTests.jl shuffles the observations in x. \n\nNumber of permutations for exact tests: there are N possible ways of reordering the N observations in x.\n\nAliases: rTest!, trendTest!\n\nMultiple comparisons version: correlationMcTest!\n\nReturn a UniTest structure.\n\nExamples\n\nusing PermutationTests\nN=10 # number of observations\nx, y = randn(N), randn(N) # some random Gaussian data for example\nt = rTest(x, y) # by deafult the test is bi-directional\n\ntR = rTest(x, y; direction=Right()) # right-directional test\ntL = rTest(x, y; direction=Left()) # Left-directional test\n# Force an approximate test with 5000 random permutations\ntapprox = rTest(x, y; switch2rand=1, nperm=5000) \n\nSimilar tests\n\nTypically, the input data is real, but can also be of type integer or boolean. If either x or y is a vector  of booleans or a vector of dicothomous data (only 0 and 1), this function will actually perform a permutation-based  version of the point bi-serial correlation test. However, as shown in the preceeding link, the point bi-serial correlation test is equivalent to  the t-test for independent sample, thus it can be tested using the t-test for independent samples, which will need many less permutations as compared to a correlation test for an exact test  (see examples below). A dedicated function in available with name pointBiSerialTest, which is an alias for studentTestIS and allowa the choice to run the test using a  correlation- or t-test statistic.\n\nIf x or y represent a trend, for example a linear trend given by [1, 2,...N],  we otain the permutation-based trend correlation test, which can be used to test the fit of any type of regression of y on x - see trendTest.    \n\nif y is a shifted version of x with a lag l, this function will test the significance of the  *autocorrelation at lag l, see the page Create your own test.\n\nExamples\n\n# Point bi-serial correlation test\nusing PermutationTests\nN=10 # number of observations\nx=[0, 0, 0, 0, 1, 1, 1, 1, 1, 1]\ny = rand(N)\nt = rTest(x, y) \n\n# Exactly the same test can be obtained as a t-test for independent sample,\n# but much faster as for an exact test the latter needs only 210 permutations \n# while the former needs 3628800 permutations.\n# This is available with a dedicated function\nt2=pointBiSerialTest(y, [4, 6])\nprintln(t.p ‚âà t2.p ? \"OK\" : \"error\")\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/#PermutationTests.correlationTest!","page":"Univariate tests","title":"PermutationTests.correlationTest!","text":"function correlationTest!(<same args and kwargs as `correlationTest`>)\n\nAs correlationTest, but x is overwritten if neither standardized nor centered is true.\n\nAliases: rTest!, trendTest! \n\nMultiple comparisons version: correlationMcTest!\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#Trend-test","page":"Univariate tests","title":"Trend test","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"trendTest\ntrendTest!","category":"page"},{"location":"univariate tests/#PermutationTests.trendTest","page":"Univariate tests","title":"PermutationTests.trendTest","text":"function trendTest(<same args and kwargs as `correlationTest`>)\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/#PermutationTests.trendTest!","page":"Univariate tests","title":"PermutationTests.trendTest!","text":"function trendTest!(<same args and kwargs as `correlationTest!`>)\n\nActually aliases for correlationTest and correlationTest!, respectively.\n\nThe two vectors x and y of N elements each are provided as data input.  x is a specified trend and y holds the observed data. A Pearson product-moment correlation test between  x and y is then carried out. \n\nx can hold any trend, such as linear, polynomial, exponential, logarithmic, power, trigonometric...\n\nDirectional tests, permutation scheme and number of permutations for exact tests: as per correlationTest\n\nMultiple comparisons versions: trendMcTest and trendMcTest!\n\nBoth methods return a UniTest structure.\n\nExamples\n\nusing PermutationTests\n# We are goint to test an upward linear trend\nN=10\nx=Float64.(collect(Base.OneTo(N))) # [1, 2, ..., N]\ny=[1., 2., 4., 3., 5., 6., 7., 8., 10., 9.]\n# Supposing we expect an upward linear trend, \n# hence the correlation is expected to be positive,\n# we can use a right-directional test to increase the power of the test.\nt = trendTest(x, y; direction=Right()) \n\n\n\n\n\n","category":"function"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#Point-bi-serial-correlation-test","page":"Univariate tests","title":"Point bi-serial correlation test","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"pointBiSerialTest","category":"page"},{"location":"univariate tests/#PermutationTests.pointBiSerialTest","page":"Univariate tests","title":"PermutationTests.pointBiSerialTest","text":"function pointBiSerialTest(<same args and kwargs as `studentTestIS`>)\n\nActually an alias for studentTestIS.\n\nUnivariate point bi-serial correlation test  by data permutation. The correlation is between an input vector y of N=N_1+N_2 elements and a vector  x, internally created, with the first N_1 elements equal to 1 and the remaining N_2 elements equal to 2. If you need to use other values for the dicothomous variable x or a different order for its elements,  use correlationTest instead. \n\nThe null hypothesis has form \n\nH_0 b_(xy)=0,\n\nwhere b_(xy) is the point bi-serial correlation between input data vectors y and the internally created vector x.\n\nDirectional tests, permutation scheme and number of permutations for exact tests: as per studentTestIS\n\nMultiple comparisons version: pointBiSerialMcTest\n\nReturn a UniTest structure.\n\nExamples\n\nusing PermutationTests\nns=[4, 6] # number of observations in group 1 and group 2 (N1 and N2)\nN=sum(ns) # total number of observations\n\ny = rand(N) # some Gaussian data as example\n# implicitly, the point bi serial correlation is \n# between y and x=[1, 1, 1, 1, 2, 2, 2, 2, 2, 2]\nt=pointBiSerialTest(y, ns) # by default the test is bi-directional\n\ntR=pointBiSerialTest(y, ns; direction=Right()) # right-directional test\ntL=pointBiSerialTest(y, ns; direction=Left()) # left-directional test\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#Student's-t-test-for-independent-samples","page":"Univariate tests","title":"Student's t-test for independent samples","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"studentTestIS","category":"page"},{"location":"univariate tests/#PermutationTests.studentTestIS","page":"Univariate tests","title":"PermutationTests.studentTestIS","text":"# METHOD (1)\nfunction studentTestIS(y::UniData, ns::IntVec;\n                direction::TestDir = Both(),\n                equivalent::Bool = true,\n                switch2rand::Int = Int(1e8),\n                nperm::Int = 20_000, \n                seed::Int = 1234, \n                verbose::Bool = true,\n                asPearson::Bool = true) where TestDir <: TestDirection\n\n\n\n\n\n# METHOD (2)\nfunction studentTestIS(yvec::UniDataVec; <same kwargs>)\n\n\n\n\n\n# METHOD (3)\nfunction studentTestIS(y1::UniData, y2::UniData; <same kwargs>)\n\nMETHOD (1)\n\nUnivariate Student's t-test for independent samples  by data permutation. Given N=N1+N_2 observations in two groups,  the null hypothesis has form\n\nH_0 Œº_1=Œº_2,\n\nwhere Œº_1 and Œº_1 are the mean for group 1 and group 2, respectively. \n\nFor a bi-directional test, this t-test is equivalent to a 1-way ANOVA for two independent samples. However, in contrast to the ANOVA, it can be directional. \n\ny is a vector concatenaning the vector of observations in the two groups. Thus, it holds N elements.\n\nns is a vector of integers holding the group numerosity (see examples below).\n\nFor optional keyword arguments, direction, equivalent, switch2rand, nperm, seed and verbose,  see here. \n\nIf asPearson is true (default), the test is run as an equivalent version of a Pearson correlation test. This is not faster in general for exact univariate tests, since the t-test needs  less permutations, but is in general advantageous for approximate tests (see the benchmarks). If your need to perform exact tests, you may want to set asPearson to false.\n\nnote: nota\nIf asPearson is true, the .stat field of the test result will actually be CrossProd(), as the data will be standardized before running the test. See correlationTest.\n\nDirectional tests\n\nFor a right-directional test, Œº_1 is expected to exceed Œº_2. If the opposite is true, the test will result in a p-value higehr then 0.5.\nFor a left-directional test, Œº_2 is expected to exceed Œº_1. If the opposite is true, the test will result a p-value higehr then 0.5.\n\nPermutation scheme: under the null hypothesis, the group membership of the observations bears no meaning. The exchangeability scheme consists then in reassigning the N observations in the two groups  respecting the original group numerosity. \n\nNumber of permutations for exact tests: there are fracNN_1 cdot N_2 possible reassigments  of the N observations in the two groups.\n\nAliases: tTestIS, pointBiSerialTest\n\nMultiple comparisons version: studentMcTestIS\n\nReturn a UniTest structure.\n\nMETHOD (2)\n\nAs (1), but yvec is a vector of 2-vectors of observations for group 1 and group 2 (see examples below).\n\nMETHOD (3)\n\nAs (1), but the observations are given separatedly for the two groups as two vectors y1 and y2 (see examples below).\n\nExamples\n\n# (1)\nusing PermutationTests\nns=[4, 5]; # number of observations in group 1 and group 2 (N1 and N2)\ny=[randn(n) for n‚ààns]; # some Gaussian data as example\nt = tTestIS(vcat(y...), ns) # by default the test is bi-directional\n\n# with a bi-directional test, t is equivalent to a 1-way ANOVA for independent samples\ntanova= fTestIS(vcat(y...), ns) \nprintln(t.p ‚âà tanova.p ? \"OK\" : \"error\")\n\n# do not run it using the CrossProd test statistic\ntcor = tTestIS(vcat(y...), ns; asPearson=false) \n\n# Force an approximate test with 10000 random permutations\ntapprox = fTestIS(vcat(y...), ns; switch2rand=1, nperm=10000) \n\ntR=tTestIS(vcat(y...), ns; direction=Right()) # right-directional test\ntL=tTestIS(vcat(y...), ns; direction=Left()) # left-directional test\n\n# in method (2) only the way the input data is formatted is different \nt2 = tTestIS(y)\nprintln(t.p ‚âà t2.p ? \"OK\" : \"error\")\n\n# in method (3) also, only the way the input data is formatted is different \nt3 = tTestIS(y[1], y[2])\nprintln(t.p ‚âà t3.p ? \"OK\" : \"error\")\n\n\nSimilar tests\n\nTypically, the input data is real, but can also be of type integer or boolean. \n\nFor dicothomous data, with this function one can obtain the same p-value as the one given by the  Fisher exact test, however in this case it is more convenient to use the fisherExactTest function,  since it accepts contingency tables as input. \n\nThis function can also be used to perform a permutation-based point-biserial correlation test. See the dedicated function pointBiSerialTest. \n\n\n\n\n\n","category":"function"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#1-way-ANOVA-for-independent-samples","page":"Univariate tests","title":"1-way ANOVA for independent samples","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"anovaTestIS","category":"page"},{"location":"univariate tests/#PermutationTests.anovaTestIS","page":"Univariate tests","title":"PermutationTests.anovaTestIS","text":"# METHOD (1)\nfunction anovaTestIS(y::UniData, ns::IntVec;\n                direction::TestDir = Both(),\n                equivalent::Bool = true,\n                switch2rand::Int = Int(1e8),\n                nperm::Int = 20_000, \n                seed::Int = 1234, \n                verbose::Bool = true) where TestDir <: TestDirection\n\n\n\n\n\n# METHOD (2)\nfunction anovaTestIS(yvec::UniDataVec; <same kwargs>)\n\nMETHOD (1)\n\nUnivariate 1-way analysis of variance (ANOVA) for independent samples  by data permutation.  Given N=N1++N_K observations in K groups, the null hypothesis has form\n\nH_0 Œº_1= ldots =Œº_K,\n\nwhere Œº_k is the mean of the k^th group. \n\ny is a vector concatenaning the vector of observations in each group, in the natural order. Thus, it holds N elements. \n\nns is a vector of integers holding the group numerosity (see examples below).\n\nFor optional keyword arguments, direction, equivalent, switch2rand, nperm, seed and verbose,  see here. \n\nDirectional tests\n\nPossible only for ùêæ=2, in which case the test reduces to a Student' t-test for independent samples and the test directionality is given by keyword arguement direction.  See function studentTestIS and its multiple comparisons version studentMcTestIS. \n\nPermutation scheme: under the null hypothesis, the group membership of the observations bears no meaning. The exchangeability scheme consists then in reassigning the N observations in the K groups  respecting the original group numerosity. \n\nNumber of permutations for exact tests: there are fracNN_1 cdot ldots cdot N_K possible ways  of reassigning the N observations in the K groups.\n\nAlias: fTestIS\n\nMultiple comparisons version: anovaMcTestIS\n\nBoth methods return a UniTest structure.\n\nMETHOD (2)\n\nAs (1), but yvec is a vector of K vectors of observations, of for each group.\n\nExamples\n\n# (1)\nusing PermutationTests\nns=[4, 5, 6] # number of observations in group 1, 2 and 3\nyvec = [randn(n) for n in ns] # some random Gaussian data for example \nt = fTestIS(vcat(yvec...), ns) # ANOVA tests are always bi-directional\n\n# Force an approximate test with 5000 random permutations\ntapprox = fTestIS(vcat(yvec...), ns; switch2rand=1, nperm=5000) \n\n# in method (2) only the way the input data is formatted is different \nt2 = fTestIS(yvec)\nprintln(t.p ‚âà t2.p ? \"OK\" : \"error\")\n\nSimilar tests\n\nTypically, for ANOVA the input data is real, but can also be of type integer or boolean. For dicothomous data,  with this function one can obtain a permutation-based version of the Œß¬≤ test  for K cdot 2 contingency tables, which has the ability to give exact p-values.  For 2 cdot 2 contingency tables it yields exactly the same p-value of the Fisher exact test, which is also exact, as the name suggests. In these cases it is more convenient to use the chiSquaredTest and fisherExactTest functions though,  which accept contingency tables as data input. \n\n\n\n\n\n","category":"function"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#Chi-squared-test","page":"Univariate tests","title":"Chi-squared test","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"chiSquaredTest","category":"page"},{"location":"univariate tests/#PermutationTests.chiSquaredTest","page":"Univariate tests","title":"PermutationTests.chiSquaredTest","text":"function chiSquaredTest(table::Matrix{I};\n            direction::TestDir = Both(),\n            equivalent::Bool = true,\n            switch2rand::Int = Int(1e8),\n            nperm::Int = 20_000, \n            seed::Int = 1234, \n            verbose::Bool = true,\n            asPearson::Bool = true) where {I <: Int, TestDir <: TestDirection}\n\n\nUnivariate chi-squared (chi^2) permutation test  for 2 cdot K contingency tables, where K is ‚â•2.  The null hypothesis has form \n\nH_0 O=E,\n\nwhere O and E are the observed and expected frequencies of the contingency table.\n\ntable is a contingency table given in the form of a matrix of integers. For example, the contingency table\n\n| 0 | 2 | 3 | Failures \n\n| 3 | 1 | 0 | Successes\n\nwill be given as\n\ntable=[0 2 3; 3 1 0]\n\nFor optional keyword arguments, direction, equivalent, switch2rand, nperm, seed and verbose,  see here.\n\nFor K=2 this function calls studentTestIS and pass to it also argument asPearson, otherwise calls anovaTestIS and argument asPearson is ignored.\n\nIn contrast to Pearson's asymptotic chi^2, with permutation tests the sample size does not have to be large. Actually, for large sample sizes Pearson's test is more efficient. For small sample sizes the p-value can be obtained  using all possible permutations, thus being exact and will be the same as the p-value obtained using  the Fisher exact test.\n\nThis permutation test is therefore not particularly useful when compared to the standard chi^2 and Fisher exact test,  however, its multiple comparison version allows the control of the family-wise error rate through data permutation. \n\nDirectional tests\n\nPossible only for ùêæ=2, in which case the test reduces to a Fisher exact test  and the test directionality is given by keyword arguement direction.  See function fisherExactTest and its multiple comparisons version fisherExactMcTest. \n\nPermutation scheme: the contingency table is converted to K vectors holding each as many observations as the corresponding column sum.  The conversion is operated internally by function table2vec. The elements of the vectors are as many zeros and ones as the counts of the two cells of the correspondind column. The F-statistic of the 1-way ANOVA for indepedent samples is then an equivalent test-statistic for the  chi^2 and the permutation scheme of that ANOVA applies (see anovaTestIS).\n\nNumber of permutations for exact tests: there are fracNN_1 cdotldotscdot N_K possible permutations, where K is the number of columns in the contingency table and N_k is the k^th column sum.\n\nAliases: Œß¬≤Test, fisherExactTest\n\nMultiple comparisons version: chiSquaredMcTest\n\nReturn a UniTest structure.\n\nExamples\n\nusing PermutationTests\ntable=[0 2 2; 3 1 0]\nt=Œß¬≤Test(table) # the test is bi-directional\n\ntable=[6 1; 2 5]\ntR=fisherExactTest(table; direction=Right()) \n# or tR=Œß¬≤Test(table; direction=Right())\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#Fisher-exact-test","page":"Univariate tests","title":"Fisher exact test","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"fisherExactTest","category":"page"},{"location":"univariate tests/#PermutationTests.fisherExactTest","page":"Univariate tests","title":"PermutationTests.fisherExactTest","text":"function fisherExactTest(<same args and kwargs as `chiSquaredTest`>)\n\nPerform an univariate Fisher exact test by data permutation. Alias for chiSquaredTest. It can be used for 2 cdot 2 contingency tables.  The contingency table in this case has form:\n\n| a | b |\n\n| c | d |\n\nFor a right-directional test, ac is expected to exceed bd. If the opposite is true, the test will result in a p-value higehr then 0.5.\nFor a left-directional test, bd is expected to exceed ac. If the opposite is true, the test will result in a p-value higehr then 0.5.\n\ntip: Nota Bene\nFor K=2, any input data matrix gives the same p-value as its transpose.\n\nMultiple comparisons version: fisherExactMcTest\n\nReturn a UniTest structure.\n\nExamples\n\nusing PermutationTests\ntable=[6 1; 2 5]\nt=fisherExactTestTest(table) \n# or t=Œß¬≤Test(table) # bi-directional test\n\ntR=fisherExactTest(table; direction=Right())  # right-directional test\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#Student's-t-test-for-repeated-measures","page":"Univariate tests","title":"Student's t-test for repeated measures","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"studentTestRM\nstudentTestRM!","category":"page"},{"location":"univariate tests/#PermutationTests.studentTestRM","page":"Univariate tests","title":"PermutationTests.studentTestRM","text":"function studentTestRM(<same args and kwargs as `studentTest1S`>)\n\nUnivariate t-test for repeated measures by data permutation. Actually an alias for studentTest1S.\n\nIn order to run a t-test for repeated measure, use as data input the vector of differences across measurements.\n\nDo not change the refmean default value. See studentTest1S for more details.\n\nAlias: tTestRM\n\nMultiple comparisons version: studentMcTestRM\n\nReturn a UniTest structure.\n\nExamples\n\nusing PermutationTests\ny1=randn(10) # measurement 1\ny2=randn(10) # measurement 2\nt=tTestRM(y1.-y2) #  # by default the test is bi-directional\n\ntR=tTestRM(y1.-y2; direction=Both()) #  right-directional test\n# if test tR is significant, the mean of measurement 1 exceeds the mean of measurement 2.\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/#PermutationTests.studentTestRM!","page":"Univariate tests","title":"PermutationTests.studentTestRM!","text":"function studentTestRM!(<same args and kwargs as `studentTestRM`>)\n\nActually an alias for studentTest1S!.\n\nSee studentTestRM for the usage of this function.\n\nAlias: tTestRM!\n\nMultiple comparisons version: studentMcTestRM!\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#1-way-ANOVA-for-repeated-measures","page":"Univariate tests","title":"1-way ANOVA for repeated measures","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"anovaTestRM","category":"page"},{"location":"univariate tests/#PermutationTests.anovaTestRM","page":"Univariate tests","title":"PermutationTests.anovaTestRM","text":"# METHOD (1)\nfunction anovaTestRM(y::UniData, ns::@NamedTuple{n::Int, k::Int};\n            direction::TestDir = Both(),\n            equivalent::Bool = true,\n            switch2rand::Int = Int(1e8),\n            nperm::Int = 20_000, \n            seed::Int = 1234, \n            verbose::Bool = true) where TestDir <: TestDirection\n\n\n\n\n\n# METHOD (2)\nfunction anovaTestRM(yvec::UniDataVec; <same kwargs>)\n\nMETHOD (1)\n\nUnivariate 1-way analysis of variance (ANOVA) for repeated measures  by data permutation. Given N observation units (e.g., subjects, blocks, etc.) for each of K repeated measures  (e.g., treatments, time, etc.), the null hypothesis has form\n\nH_0 Œº_1= ldots =Œº_K,\n\nwhere Œº_k is the mean of the k^th treatment. \n\ny is a vector concatenaning the observations for the K treatments in the natural order, that is, the N observation for treatment 1, ..., the N observations for treatment K. Thus, y holds N cdot K elements. \n\nns is a julia named tuple  with form (n=N, k=K) (see examples below).\n\nFor optional keyword arguments, direction, equivalent, switch2rand, nperm, seed and verbose,  see here. \n\nDirectional tests\n\nPossible only for ùêæ=2, in which case the test reduces to a one-sample Student' t-test on the  differences of the two treatments and the test directionality is given by keyword arguement direction.  See function studentTest1S and its multiple comparisons version studentMcTest1S. \n\nPermutation scheme: under the null hypothesis, the order of the K measurements bears no meaning. The exchangeability scheme consists then in reordering the K measurements within the N observation units. \n\nNumber of permutations for exact tests: there are K^N possible ways of reordering the K measurements in all N observation units.\n\nAlias: fTestRM\n\nMultiple comparisons version: anovaMcTestRM\n\nBoth methods return a UniTest structure.\n\nMETHOD (2)\n\nAs (1), but yvec is a vector of K vectors holding the observations for the k^th  measurement (see examples below).\n\nExamples\n\n# (1)\nusing PermutationTests\nN=6; # number of observation units\nK=3; # number of measurements\ny = [randn(N) for k=1:K] # some random Gaussian data for example \nt = fTestRM(vcat(y...), (n=N, k=K)) # ANOVA tests are always bi-directional\n\n# Force an approximate test with 5000 random permutations\ntapprox = fTestRM(vcat(y...), (n=N, k=K); switch2rand=1, nperm=5000)\n\n# in method (2) only the way the input data is formatted is different \nt2 = fTestRM(y)\nprintln(t.p ‚âà t2.p ? \"OK\" : \"error\")\n\nSimilar tests\n\nTypically, the input data is real, but can also be of type integer or boolean. For dicothomous data,  with this function one can obtain the permutation-based Cochran Q test for K2 and the permutation-based McNemar test  for K=2, but with the ability to give exact p-values. For these two tests the dedicated functions cochranqTest and mcNemarTest is available.\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#Cochran-Q-test","page":"Univariate tests","title":"Cochran Q test","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"cochranqTest","category":"page"},{"location":"univariate tests/#PermutationTests.cochranqTest","page":"Univariate tests","title":"PermutationTests.cochranqTest","text":"function cochranqTest(table::Matrix{I};\n            direction::TestDir = Both(),\n            equivalent::Bool = true,\n            switch2rand::Int = Int(1e8),\n            nperm::Int = 20_000, \n            seed::Int = 1234, \n            verbose::Bool = true) where {I <: Int, TestDir <: TestDirection}\n\n\nUnivariate Cochran Q test by data permutation. The Cochran Q test  is analogous to the 1-way ANOVA for repeated measures, but takes as input dicothomous data (zeros and ones). Given N observation units (e.g., subjects, blocks, etc.) and K repeated measures  (e.g., treatments, time, etc.), the null hypothesis has form\n\nH_0 Œº_1= ldots =Œº_K,\n\nwhere Œº_k is the mean of the k^th measure. \n\nWhen K=2 the test reduces to the McNemar test, which is the analogous to the Student's t-test for repeated measures taking as input dicothomous data (zeros and ones). \n\nInput table is a N cdot K table of zeros and ones, where N is the number of observations and  K the repeated measures. Transposed, one such data would look like\n\n| 1 | 1 | 1 | 1 | 1 | 1 | Measure 1\n\n| 1 | 0 | 1 | 1 | 0 | 1 | Measure 2\n\n| 0 | 0 | 1 | 0 | 1 | 0 | Measure 3\n\nThis table shall be given as input such as      table=[1 1 0; 1 0 0; 1 1 1; 1 1 0; 1 0 1; 1 1 0]\n\nand internally it will be converted to the appropriate format by function table2vec.\n\nnote: Redundant permutations\nAdding any number of vectors [0 0 0] or [1 1 1] in any combination to the table here above,  yields exactly the same p-value using systematic permutations, but increase the number of permutations to be listed. If such vector exist in your data, you can delete them to obatin a faster test.\n\nFor optional keyword arguments, direction, equivalent, switch2rand, nperm, seed and verbose,  see here.\n\nIn contrast to the Cochran Q and  McNemar asymptotic tests,  with permutation tests the sample size does not have to be large. Actually, for large sample sizes the Cochran Q and McNemar tests are more efficient, although they do not provide  an exact p-value (an exact test for the case K=2 can be derived though). Overall, this permutation test is not very useful when compared to the standard Cochran Q and McNemar tests,  however, its multiple comparison version allows the control of the family-wise error rate by means of data permutation. \n\nDirectional tests\n\nPossible only for ùêæ=2, in which case the test reduces to a MnNemar test  and the test directionality is given by keyword arguement direction.  See function mcNemarTest and its multiple comparisons version mcNemarMcTest. \n\nPermutation scheme: the F-statistic of the 1-way ANOVA for repeated measure is an equivalent test-statistic for the  Cochran Q test and the permutation scheme of that ANOVA applies (see anovaTestRM). The permutation scheme is the same for tha case of K=2 (McNemar test).\n\nNumber of permutations for exact tests: there are K^N possible ways of reordering the K measurements in all the N observation units.\n\nAliases: qTest, mcNemarTest\n\nMultiple comparisons versions: cochranqMcTest, mcNemarMcTest \n\nReturn a UniTest structure.\n\nExamples\n\nusing PermutationTests\ntable=[1 1 0; 1 0 0; 1 1 1; 1 1 0; 1 0 1; 1 1 0]\nt=qTest(table) # the test is bi-directional\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#McNemar-test","page":"Univariate tests","title":"McNemar test","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"mcNemarTest","category":"page"},{"location":"univariate tests/#PermutationTests.mcNemarTest","page":"Univariate tests","title":"PermutationTests.mcNemarTest","text":"function mcNemarTest(same args and kwargs as `cochranqTest`>)\n\nUnivariate McNemar test by data permutation. Alias  for cochranqTest. It can be used for 2 cdot 2 contingency tables.\n\nNotice that cochranqTest does not accept data input in the  form of a contingency table. If your data is in the form of a contingency table, here is how you can convert it:\n\ngiven the contingency table\n\n| a | b |\n\n| c | d |\n\nyou will create a vector holding:\n\nas many vectors [0, 1] as the b frequency.\nas many vectors [1, 0] as the c frequency.\n\nFor example, the contingency table\n\n| 1 | 2 |\n\n| 3 | 4 |\n\nwill be given as input such as as\n\ntable=[0 1; 0 1; 1 0; 1 0; 1 0]\n\nnote: Redundant permutations\nAdding any number of vectors [0 0] or [1 1] in any combination to the table here above,  yields exactly the same p-value using systematic permutations. Like in the asymptotic McNemar test, these vector correspond to elements a and d of the  contingency table and have no effect.\n\nDirectional tests\n\nFor a right-directional test, c is expected to exceed b. If the opposite is true, the test will result in a p-value higher then 0.5.\nFor a left-directional test, b is expected to exceed c. If the opposite is true, the test will result in a p-value higher then 0.5.\n\nMultiple comparisons version: mcNemarMcTest\n\nReturn a UniTest structure.\n\nExamples\n\nusing PermutationTests\ntable=[1 0; 1 0; 1 0; 1 0; 0 1]\nt=mcNemarTest(table) # by default the test is bi-directional\n\ntR=mcNemarTest(table; direction=Right()) # right-directional test\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#One-sample-Student's-t-test","page":"Univariate tests","title":"One-sample Student's t-test","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"studentTest1S\nstudentTest1S!","category":"page"},{"location":"univariate tests/#PermutationTests.studentTest1S","page":"Univariate tests","title":"PermutationTests.studentTest1S","text":"function studentTest1S(ùê≤::UniData;\n            refmean::Realo = nothing,\n            direction::TestDir = Both(),\n            equivalent::Bool = true,\n            switch2rand::Int = Int(1e8),\n            nperm::Int = 20_000, \n            seed::Int = 1234, \n            verbose::Bool = true) where TestDir <: TestDirection =\n\nUnivariate one-sample t-test  by data permutation. The null hypothesis has form \n\nH_0 Œº=Œº_0,\n\nwhere Œº is the mean of the observations and Œº_0 is a reference population mean.\n\nrefmean is the reference mean (Œº_0) above. The default is 0, which is the value used for most tests.\n\nFor optional keyword arguments, direction, equivalent, switch2rand, nperm, seed and verbose,  see here.\n\nDirectional tests\n\nFor a right-directional test, Œº is expected to exceeds Œº_0. If the opposite is true the test will result in a p-value higehr then 0.5.\nFor a left-directional test, Œº_0 is expected to exceeds Œº. If the opposite is true the test will result in a p-value higehr then 0.5.\n\nPermutation scheme: the one-sample t-test test is equivalent to a t-test for two repeated measures, the mean of the difference of which  is tested by the one-sample t-test. Under the null hypothesis, the order of the two measurements bears no meaning. The exchangeability scheme consists then in reordering the two measurements in the N observation units.  For a one-sample t-test, this amounts to considering the observations with the observed and switched sign.\n\nNumber of permutations for exact tests: there are 2^N possible ways of reordering the two measurements in the N observations of y. For the one-sample t-test, this is the number of possible configurations of the signs of the observations.\n\nAlias: tTest1S \n\nMultiple comparisons version: studentMcTest1S\n\nReturn a UniTest structure.\n\nExamples\n\nusing PermutationTests\nN=20 # number of observations\ny = randn(N) # some random Gaussian data for example\nt = tTest1S(y) # test H0: Œº(y)=0. By deafult the test is bi-directional\n\nt = tTest1S(y; refmean=1.) # test H0: Œº(y)=1\ntR = tTest1S(y; direction=Right()) # right-directional test\ntL = tTest1S(y; direction=Left()) # Left-directional test\n# Force an approximate test with 5000 random permutations\ntapprox = tTest1S(y; switch2rand=1, nperm=5000) \n\nSimilar tests\n\nTypically, the input data is real, but can also be of type integer or boolean. If either y is a vector  of booleans or a vector of dicothomous data (only 0 and 1), this function will actually perform a permutation-based  version of the sign test. With boolean input, use the signTest function.\n\nPassing as data input the vector of differences of two repeated measurements, this function carries out the  Student's t-test for repeated measurements. If you need such a test you may want to use the studentTestRM alias.\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/#PermutationTests.studentTest1S!","page":"Univariate tests","title":"PermutationTests.studentTest1S!","text":"function studentTest1S!(y::UniData; <same args and kwargs as `studentTest1S`>)\n\nAs studentTest1S, but y is overwritten in the case of approximate (random permutations) tests.\n\nAlias: tTest1S!\n\nMultiple Comparison version: studentMcTest1S!\n\n\n\n\n\n","category":"function"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"","category":"page"},{"location":"univariate tests/#Sign-test","page":"Univariate tests","title":"Sign test","text":"","category":"section"},{"location":"univariate tests/","page":"Univariate tests","title":"Univariate tests","text":"signTest","category":"page"},{"location":"univariate tests/#PermutationTests.signTest","page":"Univariate tests","title":"PermutationTests.signTest","text":"signTest(ùê≤::Union{BitVector, Vector{Bool}};\n            direction::TestDir = Both(),\n            equivalent::Bool = true,\n            switch2rand::Int = Int(1e8),\n            nperm::Int = 20_000, \n            seed::Int = 1234, \n            verbose::Bool = true) where TestDir <: TestDirection =\n\n\nUnivariate sign test by data permutation. The null hypothesis has form \n\nH_0 E(true)=E(false),\n\nwhere E(true) and E(false) are the expected number of true and false occurrences, respectively.\n\ny ia a vector of N booleans.\n\nFor optional keyword arguments, direction, equivalent, switch2rand, nperm, seed and verbose,  see here.\n\nDirectional tests\n\nFor a right-directional test, E(true) is expected to exceeds E(false). If the opposite is true the test will result in a p-value higehr then 0.5.\nFor a left-directional test, E(false) is expected to exceeds E(true). If the opposite is true the test will result in a p-value higehr then 0.5.\n\nPermutation scheme and number of permutations for exact tests: as per studentTest1S. \n\nThe significance of the univariate sign test can be obtained much more efficiently using the binomial distribution. This permutation test is therefore not useful at all in the univariate case,  however, its multiple comparison version allows the control of the family-wise error rate by data permutations.\n\nMultiple comparisons version\n\nsignMcTest\n\nReturn a UniTest structure.\n\nExamples\n\nusing PermutationTests\nN=20; # number of observations\ny = rand(Bool, N); # some random Gaussian data for example\nt = signTest(y) # By deafult the test is bi-directional\n\ntR = signTest(y; direction=Right()) # right-directional test\ntL = signTest(y; direction=Left()) # Left-directional test\n# Force an approximate test with 5000 random permutations\ntapprox = signTest(y; switch2rand=1, nperm=5000) \n\n\n\n\n\n","category":"function"},{"location":"tools/#Tools","page":"Tools","title":"Tools","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"Collection of utilities. At times, you will be referred to this page by the documentation, but for general usage of this package you can skip this page.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"","category":"page"},{"location":"tools/#ns","page":"Tools","title":"ns","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"The argument ns is often employed in the functions below, but also by some functions carrying out permutation tests. This argument is special to each group of statistics. In the table here below N denotes the number of observations and K the number of groups or measurements:","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"Statistics group ns argument\nBivStatistic an integer indicating the number of bivariate observations N\nIndSampStatistic a vector of integers, holding the group numerosity N_1 N_K\nRepMeasStatistic a tuple with form ns=(n=N k=K)\nOneSampStatistic an integer indicating the number of observations N","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"assignment\neqStat\nallPerms\nnrPerms\ngenPerms\ntable2vec","category":"page"},{"location":"tools/#PermutationTests.assignment","page":"Tools","title":"PermutationTests.assignment","text":"function assignment(stat::Union{BivStatistic, OneSampStatistic}, ns::Int) \n\nfunction assignment(stat::IndSampStatistic, ns::Vector{Int}) \n\nfunction assignment(stat::RepMeasStatistic, ns::@NamedTuple{n::Int, k::Int})\n\nAnalyse the ns argument for test statistic given as singleton stat and return a  singleton of type Assignment, Balanced() if the design is balanced  (equal subjects in all groups/measurements), Unbalanced() otherwise. \n\nOnly for test-statistics of the IndSampStatistic group the result may be Unbalanced();  for all the others the result is always Balanced(). \n\nThe complete list of test statistics is here.\n\nExamples\n\nusing PermutationTests\nassignment(PearsonR(), 12) # -> Balanced()\nassignment(AnovaF_IS(), [5, 5, 6]) # -> Unbalanced()\nassignment(AnovaF_IS(), [6, 6, 6]) # -> Balanced()\nassignment(StudentT_IS(), [5, 6]) # -> Unbalanced()\nassignment(StudentT_IS(), [5, 5]) # -> Balanced()\nassignment(AnovaF_RM(), (n=10, k=3)) # -> Balanced()\nassignment(StudentT_1S(), 8) # -> Balanced()\n\n\n\n\n\n","category":"function"},{"location":"tools/#PermutationTests.eqStat","page":"Tools","title":"PermutationTests.eqStat","text":"function eqStat(stat, direction::TestDir, design::Assign) \n    where {TestDir<: TestDirection, Assign <: Assignment}\n\nReturn the most efficient statistic equivalent to stat, for the given  singleton direction of type TestDirection and singleton design of type Assignment.\n\nstat is a singleton of one of the five typical test statistics, that is, PearsonR(), AnovaF_IS(), StudentT_IS, AnovaF_RM() or  StudentT_1S(), see Statistic.\n\nTo avoid errors, use the result of assignment as argument design. \n\nDo not use StudentT_RM() as stat; PermutationTests.jl never use this test statistic. instead, t-tests for repeated measures are carried out as one-sample t-tests on the difference of the two measurements. \n\nExamples\n\nusing PermutationTests\na=assignment\nns=12\neqStat(PearsonR(), Both(), a(PearsonR(), ns))       # -> Covariance()\neqStat(PearsonR(), Right(), a(PearsonR(), ns))      # -> CrossProd()\nns=[6, 6, 6]\neqStat(AnovaF_IS(), Both(), a(AnovaF_IS(), ns))     # -> SumGroupTotalsSq_IS()\nns=[6, 7, 6]\neqStat(AnovaF_IS(), Both(), a(AnovaF_IS(), ns))     # -> SumGroupTotalsSqN_IS()\nns=[6, 7]\neqStat(StudentT_IS(), Both(), a(StudentT_IS(), ns)) # -> SumGroupTotalsSqN_IS()\neqStat(StudentT_IS(), Left(), a(StudentT_IS(), ns)) # -> Group1Total_IS()\nns=(n=10, k=3)\neqStat(AnovaF_RM(), Both(), a(AnovaF_RM(), ns))     # -> SumTreatTotalsSq_RM()\neqStat(AnovaF_RM(), Right(), a(AnovaF_RM(), ns))    # -> SumTreatTotalsSq_RM()\nns=7\neqStat(StudentT_1S(), Both(), a(StudentT_1S(), ns)) # -> Sum()\neqStat(StudentT_1S(), Left(), a(StudentT_1S(), ns)) # -> Sum()\n\n\n\n\n\n","category":"function"},{"location":"tools/#PermutationTests.allPerms","page":"Tools","title":"PermutationTests.allPerms","text":"function allPerms(stat::BivStatistic, ns::Int) \n\nfunction allPerms(stat::IndSampStatistic, ns::Vector{Int})\n\nfunction allPerms(stat::RepMeasStatistic, ns::@NamedTuple{n::Int, k::Int})\n\nfunction allPerms(stat::OneSampStatistic, ns::Int)\n\n\nTotal number of systemetic permutations (exact test) for a test statistic given as singleton stat  of a given group.\n\nFor the ns argument see ns.\n\nFor an exact tests with N observations and K groups/measuremets,  the total number of systematic permutations is\n\nfor stat a BivStatistic :quad N  \nfor stat a IndSampStatistic : quad fracNN_1 cdot ldots cdot N_K\nfor stat a RepMeasStatistic : quad K^N \nfor stat a OneSampStatistic : quad 2^N\n\nFor the number of non-redundant permutations, which is the actual number of permutations that are listed for exact tests, see nrPerms.\n\nExamples\n\n# Total number of possible permutations for a 1-way ANOVA for indepedent samples \n# test with a total of 18 observations in three balanced groups.\nallPerms(AnovaF_IS(), [6, 6, 6]) # -> 17153136\n\n# Total number of possible permutations for a correlation test with 12 observations.\nallPerms(PearsonR(), 12) # -> 479001600\n\n\n\n\n\n","category":"function"},{"location":"tools/#PermutationTests.nrPerms","page":"Tools","title":"PermutationTests.nrPerms","text":"function nrPerms(stat::Union{BivStatistic, OneSampStatistic}, ns::Int, total, \n                direction::TestDir, design::Assign=Balanced()) \n\nfunction nrPerms(stat::IndSampStatistic, ns::Vector{Int}, total, \n                direction::TestDir, design::Assign)\n\nfunction nrPerms(stat::RepMeasStatistic, ns::@NamedTuple{n::Int, k::Int}, total, \n                direction::TestDir, design::Assign=Balanced())\n                \n    where {TestDir<: TestDirection, Assign <: Assignment}\n\n\nNumber of non-redundant systemetic permutations. This is the actual number of permutations  that are listed for an exact test.\n\nDepending on the test direction and design, there may exists redundant permutations, i.e.,  permutations that yields the same test statistic.  These permutations are therefore eliminated, yielding a faster test.\n\nstat is the test statistic used by the test given as a singleton.  It belongs to one group  of test statistics.\n\nFor the ns argument see ns.\n\ntotal is the total number of systematic permutations. In order to avoid errors, it should be given  as the resut of the allPerms function.\n\ndirection is a singleton of type TestDirection.\n\ndesign is a singleton of type Assignment. In order to avoid errors,  use the result of assignment as argument design. \n\nWith stat a IndSampStatistic and a balanced design, the non-redundant permutations are fractotalK,  with K the number of groups.\n\nWith stat a RepMeasStatistic and a bi-directional tests, the non-redundant permutations are fractotalK, with K the number of measures.\n\nFor stat a BivStatistic or a OneSampStatistic return total, that is, there is no possible redundancy.\n\nNote that the elimination of redundant permutations is rarely implemented in software packages for permutation tests.\n\nExamples\n\nusing PermutationTests\n# Number of possible permutations for a 1-way ANOVA for indepedent samples \n# test with a total of 18 observations in three balanced groups.\nns=[6, 6, 6]\ntotal=allPerms(AnovaF_IS(), ns) # -> 17153136\n# Number of non-redundant permutations that will be actually listed\n# to perform the test.\ndesign=assignment(AnovaF_IS(), ns)\nnrPerms(AnovaF_IS(), ns, total, Both(), design) # -> 2858856\n\n\n\n\n\n","category":"function"},{"location":"tools/#PermutationTests.genPerms","page":"Tools","title":"PermutationTests.genPerms","text":"function genPerms(stat::BivStatistic, x::UniData, \n            ns::Int, direction::TestDir, design::Assign) \n    \nfunction genPerms(stat::IndSampStatistic, x::UniData, \n            ns::Vector{Int}, direction::TestDir, design::Assign)\n                \nfunction genPerms(stat::RepMeasStatistic, x::UniData, \n            ns::@NamedTuple{n::Int, k::Int}, direction::TestDir, design::Assign)\n            \nfunction genPerms(stat::OneSampStatistic, x::UniData, \n            ns::Int, direction::TestDir, design::Assign)\n\n    where {TestDir<: TestDirection, Assign <: Assignment}\n\nGenerate a lazy iterator over all possible (systematic) permutations according to the permutation scheme  to be used for test statistic stat, which is given as a singleton of type Statistic.\n\nNote that data permutation in PermutationsTests.jl are always obtained by lazy iterators, that is, permutations are never listed physically. This is one of the main reasons why the package is fast and allocates little memory.\n\nYou do not need these functions for general usage of the package, however you need to know them  if you wish to create your own test. \n\nThere exists a permutation scheme for each group the test statistics stat belong to.\n\nx is the membership vector.\n\nFor the ns argument see ns.\n\ndirection is a singleton of type TestDirection.\n\ndesign is a singleton of type Assignment. In order to avoid errors,  use the result of assignment as argument design. \n\nWith stat a BivStatistic (e.g., PearsonR()), the iterations unfold the N possible reorderings of the  N elements in vector x and argument ns is ignored. In this case x is either a trend (e.g., [1,...,N]  for a linear trend) or a variable to be permuted for correlation/trend tests.\n\nWith stat a IndSampStatistic (e.g., AnovaF_IS()), the iterations unfold the  fracNN_1 cdot ldots cdot N_K possible arrangements of N elements in K groups.  In this case x is ignored and ns is a vector holding the K group  numerosities (i.e., [N1,...,Nk]). For this scheme, if the design is balanced, i.e., all elements of ns are equal,  some permutations are redundant, see nrPerms.\n\nWith stat a RepMeasStatistic (e.g., AnovaF_RM()), the iterations unfold the (K)^N reordering of K measures  (e.g., treatments) in all N observation (e.g., subjects). In this case x is ignored and ns is a  named tuple with form (n=N, k=K). For this scheme, if the test is bi-directional some permutations are redundant, see nrPerms.\n\nWith stat a OneSampStatistic (e.g., StudentT_1S()), the iteartions unfold the 2^N flip-sign patterns.  In this case x is ignored and ns=N, where N is the number of observations.\n\nnote: nota bene\nOnly for stat belonging to the OneSampStatistic group,  the iterator generates tuples and not arrays (see examples below).\n\ntip: keep in mind\nRegardless the permutation scheme, the first generated iteration always correspons to the \"permutation\" of the data as it has been observed (that is, the only permutation that actually does not permute the data).\n\nExamples\n\nusing PermutationsTests\n\nx=membership(PearsonR(), 3) # -> [1, 2, 3]\n# The observations are always listed in the natural order 1, 2,...\nPr = genPerms(PearsonR(), x, 0, Both(), Balanced()) \ncollect(Pr) # physically list the iterations\n# yields the 6 = 3! elements [1, 2, 3]...[3, 2, 1]\n# Here the integers represent the permuted position of the obervations in x\n\nPfIS = genPerms(AnovaF_IS(), Int[], [2, 3], Both(), Unbalanced()) \ncollect(PfIS)\n# yields the 10 = 5!/2!3! elements [1, 1, 2, 2, 2]...[2, 2, 2, 1, 1]\n# Here the integers represent the permuted group to which the corresponding \n# obervations in the data vector `y` belongs. see `_permTest!`.\n# If the design is balanced and the test is bi-directional, \n# only 1/k! of the permutations are retained, thus \nPfIS_ = genPerms(AnovaF_IS(), Int[], [2, 2], Both(), Balanced()) \ncollect(PfIS_) \n# yields the 3 = (4!/2!2!)/2! elements [1, 1, 2, 2], [1, 2, 2, 1] and [2, 1, 2, 1]\n\nPfRM = genPerms(AnovaF_RM(), Int[], (n=2, k=3), Right(), Balanced()) \ncollect(PfRM)\n# yields the 36 = (k!)^n elements [1, 2, 3, 4, 5, 6], [1, 3, 2, 4, 5, 6], \n# ..., [3, 2, 1, 6, 5, 4]\n# Here the integers represent the treatement for each subject to which the \n# corresponding obervation in the data vector `y` belongs. see `_permTest!`.\n# If the test is bi-directional, \n# only 1/k! of the permutations are retained, thus \nPfRM_ = genPerms(AnovaF_RM(), Int[], (n=2, k=3), Both(), Balanced()) \ncollect(PfRM_)\n# yields instead the 6 = (k!)^n / elements [1, 2, 3, 4, 5, 6], [1, 3, 2, 4, 5, 6], \n# ..., [3, 2, 1, 4, 5, 6]\n\nPt1S = genPerms(StudentT_1S(), Int[], 3, Both(), Balanced())\ncollect(Pt1S)\n# yields the 8=2^3 elements (1, 1, 1), (-1, 1, 1), (1, -1, 1), (-1, -1, 1), \n#..., (-1, -1, -1) \n# Here the integers represent the sign to be applied to each observation \n# at each data permutation. \n# Note that only for OneSampStatistic, the iterator generates tuples and not arrays.\n\n\n\n\n\n","category":"function"},{"location":"tools/#PermutationTests.table2vec","page":"Tools","title":"PermutationTests.table2vec","text":"function table2vec(table::Matrix{I}, stat::IndSampStatistic) \n\nfunction table2vec(tables::AbstractVector{Matrix{I}}, stat::IndSampStatistic) \n\nfunction table2vec(table::Matrix{I}, stat::RepMeasStatistic) \n\nfunction table2vec(tables::AbstractVector{Matrix{I}}, stat::RepMeasStatistic) \n\n    where I<:Int\n\n\nFormat tables of dicothomous data so as to create data input for test functions. \n\nReturn the 2-tuple holding the formatted table as a vector (for univariate test) or a vector of vectors (for multiple comparisons tests) and the appropriate argument ns.\n\nYou do not need to use these functions in general, as they are called internally by the test functions. However they may be useful if you create your own test for dicothomous data.\n\nstat is a singleton of the Statistic type, that is, a test-statistic belonging to one of the group of test statistics.\n\nFor the usage of these functions, see the documentation of the test functions using them:\n\nUnivariate test functions\n\nchiSquaredTest\nfisherExactTest\ncochranqTest\nmcNemarTest\n\nMultiple comparisons test functions\n\nchiSquaredMcTest\nfisherExactMcTest\ncochranqMcTest\nmcNemarMcTest\n\n\n\n\n\n","category":"function"},{"location":"test statistics/#Test-statistics","page":"Test statistics","title":"Test statistics","text":"","category":"section"},{"location":"test statistics/","page":"Test statistics","title":"Test statistics","text":"The test statistics used by PermutationTests.jl are computed by the several methods of the  statistic function listed here below. You do not need to use them to carry out permutation tests, however they are exported  because they may turn useful. For general usage of this package you can skip this page.","category":"page"},{"location":"test statistics/","page":"Test statistics","title":"Test statistics","text":"All statistic methods take a singleton of the Statistic type and other arguments to yield a specific test-statistic.","category":"page"},{"location":"test statistics/","page":"Test statistics","title":"Test statistics","text":"All test statistics are grouped in four Statistic groups.","category":"page"},{"location":"test statistics/","page":"Test statistics","title":"Test statistics","text":"","category":"page"},{"location":"test statistics/","page":"Test statistics","title":"Test statistics","text":"statistic","category":"page"},{"location":"test statistics/#PermutationTests.statistic","page":"Test statistics","title":"PermutationTests.statistic","text":"function statistic(x::UniData, y::UniData, stat::PearsonR; \n                standardized::Bool=false, \n                centered::Bool=false, \n                means::Tuple=(), \n                sds::Tuple=(), kwargs...)\n\nPearson product-moment correlation r statistic of input data vector x and y. \n\nIf the means and/or standard deviations of x and y are passed as tuple means and sds, respectively, they are not computed.\n\nIf centered is true, the two vectors are assumed to have zero mean.\n\nIf standardized is true both x and y are assumed standardized,  thus only the cross-product needs to be computed. This is by far the most efficient way  if this function is to be called repeatedly on the same data input vectors and for computing p-values by data permutations as the cross-product is en equivalent test statistic for the Pearson correlation  if the data is standardized.\n\nExamples\n\nusing PermutationTests\nx, y = randn(10), randn(10);\nc1 = statistic(x, y, PearsonR())\n\nzx=Œº0œÉ1(x);\nzy=Œº0œÉ1(y);\nc2 = statistic(zx, zy, PearsonR(); standardized=true)\n\nsee Œº0œÉ1\n\n\n\n\n\nfunction statistic(x::UniData, y::UniData, stat::Covariance; \n                centered::Bool=false, \n                means::Tuple=(), \n                kwargs...)\n\nCovariance of data input vectors x and y.\n\nEquivalent to the Pearson correlation r test statistic for bi-directional correlation tests,  see Statistic.\n\nFor the optional keyword arguments, see the method statistic(x, y, stat::PearsonR).\n\nExamples\n\nusing PermutationTests\nx, y = randn(10), randn(10)\nc1 = statistic(x, y, Covariance())\n\nc2 = statistic(Œº0(x), Œº0(y), Covariance(); centered=true)\n\nŒºx=Œº(x)\nŒºy=Œº(y)\nc3 = statistic(x, y, Covariance(); means=(Œºx, Œºy))\n\nsee Œº0, Œº \n\n\n\n\n\nfunction statistic(x::UniData, y::UniData, stat::CrossProd; \n                kwargs...)\n\nCross-product (inner product) of data input vectors x and y.\n\nEquivalent to the Pearson correlation r test statistic for directional correlation tests and always  if the data is standardized, see Statistic.\n\nExamples\n\nusing PermutationTests\nx, y = randn(10), randn(10)\nc = statistic(x, y, CrossProd())\n\n\n\n\n\nfunction statistic(x::IntVec, y::UniData, stat::AnovaF_IS; \n                k::Into=nothing, \n                ns::Union{Vector{Int}, Nothing}=nothing, \n                kwargs...) \n\nF statistic of the 1-way ANOVA for independent samples, see Edgington (1995), p. 60. \n\nThe data is given as an unique vector y, holding the observations for each group in the natural order, thus for K groups y holds N=N_1+ ldots +N_K elements, where N_k is the number of observations  for the k^th group.\n\nx is the membership(::IndSampStatistic) vector.\n\nk is the number of groups (independent samples). If omitted it will be computed.\n\nns is the group numerosity vector with form ns=[N1,..., NK]. If omitted it will be computed.\n\nExamples\n\nusing PermutationTests\ng1=[1.0, 2.0, 3.0, 4.0] # observations for group 1 \ng2=[1.1, 2.8, 3.2, 4.4, 5.3] # observations for group 2 \nns=[length(g1), length(g2)] # N1, N2\ny=vcat(g1, g2)\nx=membership(AnovaF_IS(), ns)\nF=statistic(x, y, AnovaF_IS())\n# or, to avoid finding k and ns from y\nF2=statistic(x, y, AnovaF_IS(); k=2, ns=ns)\n\n# The square of the t test statistic for independent samples for a bi-directional test\n# is equal to the above F test statistics\n\nt=statistic(x, y, StudentT_IS(); ns=ns)\nprintln(t^2‚âàF ? \"OK\" : \"error\")\n\n\n\n\n\n\nfunction statistic(x::IntVec, y::UniData, stat::SumGroupTotalsSq_IS; \n                k::Into=nothing, \n                kwargs...)\n\nSum of squared group totals. \n\nEquivalent to the 1-way ANOVA for independent samples F test statistic in balanced designs, see Statistic. \n\nFor optional keyword argument k, see the statistic method for AnovaF_IS here above.\n\n\n\n\n\nfunction statistic(x::IntVec, y::UniData, stat::SumGroupTotalsSqN_IS; \n                k::Into=nothing, \n                ns::Union{Vector{Int}, Nothing}=nothing, \n                kwargs...)\n\nSum of squared group totals divided each by the group numerosity. \n\nEquivalent to the 1-way ANOVA for independent samples F test statistic in general, see Statistic.\n\nFor optional keyword arguments k and ns and for examples,  see the statistic method for AnovaF_IS here above.\n\n\n\n\n\nfunction statistic(x::IntVec, y::UniData, stat::StudentT_IS; \n                k::Into=nothing, \n                ns::Union{Vector{Int}, Nothing}=nothing, \n                kwargs...)\n\nStudent's t statistic for independent samples, see Edgington (1995), p. 3.\n\nFor all arguments except stat and examples see the statistic method for AnovaF_IS here above.\n\n\n\n\n\nfunction statistic(x::IntVec, y::UniData, stat::Group1Total_IS; \n                kwargs...)            \n\nSum of observations for group 1.\n\nEquivalent to the Students's t test statistic for independent samples for diretional tests, see Statistic.\n\nFor arguments x and y and for examples, see the statistic method for AnovaF_IS here above.\n\n\n\n\n\nfunction statistic(x::IntVec, y::UniData, stat::AnovaF_RM; \n                ns::@NamedTuple{n::Int, k::Int}, \n                ‚àëY¬≤kn::Realo=nothing, \n                ‚àëy¬≤::Realo=nothing, \n                ‚àëS¬≤k::Realo=nothing, \n                kwargs...) \n\nF statistic of 1-way ANOVA for repeated measures, see Edgington (1995), p. 102. \n\nThe data is given as an unique vector y concatenaning the N observations for the K measures  (treatments, time, ...) in the natural order, that is, the K treatments for observation 1, ...,  the K tratments for observation N. Thus, y holds N cdot K elements. \n\nx is the membership(::RepMeasStatistic) vector.\n\nns is a julia named tuple  with form (n=N, k=K) (see examples below).\n\n‚àëY¬≤kn, ‚àëy¬≤ and ‚àëS¬≤k can be optionally provided to speed up computations since these quantities are invariant by data permutations. The exported function _‚àëY¬≤kn_‚àëy¬≤_‚àëS¬≤k can be used for this purpose,  see the examples below. \n\nExamples\n\nusing PermutationTests\n# K=2 (measurements), N=4 (observations)\no1=[1.0, 2.0]; # first observation \no2=[2.0, 2.8]; # second observation \no3=[3.0, 2.6]; # third observation\no4=[4.0, 4.1]; # fourth observation\nns=(n=4, k=2); # four obs. and two measurements\ny=vcat(o1, o2, o3, o4);\nx=membership(AnovaF_RM(), ns);\nF=statistic(x, y, AnovaF_RM(); ns=ns)\n\n# pre-compute some data\npcd=_‚àëY¬≤kn_‚àëy¬≤_‚àëS¬≤k(y, ns);\nF2=statistic(x, y, AnovaF_RM(); ns=ns, ‚àëY¬≤kn=pcd[1], ‚àëy¬≤=pcd[2], ‚àëS¬≤k=pcd[3])\n\n# The t test statistic for repeated measures is the same as the one-sample \n# t test statistic on the difference of the two measurements. \n# The square of those statistics for a bi-directional test are equal to \n# the above F test statistics. \n\nx=membership(StudentT_1S(), ns.n)\nt=statistic(x, y[1:2:ns.n*2-1].-y[2:2:ns.n*2], StudentT_1S())\nprintln(t^2‚âàF ? \"OK\" : \"error\")\n\n\n\n\n\n\nfunction statistic(x::IntVec, y::UniData, stat::SumTreatTotalsSq_RM; \n                ns::@NamedTuple{n::Int, k::Int}, \n                kwargs...)\n\nSum of squared treatment totals.\n\nEquivalent to the 1-way ANOVA for repeated measures F test statistic in general, see Statistic.\n\nFor optional keyword argument ns see the statistic method for AnovaF_RM here above.\n\n\n\n\n\nfunction statistic(x::Tuple, y::UniData, stat::StudentT_1S; \n                ‚àëy¬≤::Realo=nothing, \n                kwargs...) \n\nStudent's one-sample t statistic.\n\ny is the input data.\n\nx is a tuple holding as many 1.0 as elements in y.\n\n‚àëy¬≤ can be optionally provided to speed up computations, since this quantity is invariant by data permutations. The exported function _‚àëy¬≤ can be used for this purpose,  see the examples below. \n\nExamples\n\nusing PermutationsTest\ny=randn(6);\nx=(1., 1., 1., 1., 1., 1.);\nt=statistic(x, y, StudentT_1S()) \n\npcd=_‚àëy¬≤(y)\nt2=statistic(x, y, StudentT_1S(); ‚àëy¬≤=pcd) \nprintln(t‚âàt2 ? \"OK\" : \"Error\")\n\n\n\n\n\nfunction statistic(x::UniData, y::UniData, stat::StudentT_1S; \n                ‚àëy¬≤::Realo=nothing, \n                kwargs...)\n\nStudent's one-sample t statistic.\n\ny is the input data.\n\nx is the membership(::OneSampStatistic) vector.\n\n‚àëy¬≤ can be optionally provided to speed up computations since this quantity is invariant by data permutations. The exported function _‚àëy¬≤ can be used for this purpose,  see the examples below. \n\nExamples\n\nusing PermutationsTest\ny=randn(6);\nx=membership(StudentT_1S(), length(y));\nt=statistic(x, y, StudentT_1S()) \n\npcd=_‚àëy¬≤(y)\nt2=statistic(x, y, StudentT_1S(); ‚àëy¬≤=pcd) \nprintln(t‚âàt2 ? \"OK\" : \"Error\")\n\n\n\n\n\nfunction statistic(x::Tuple, y::UniData, stat::Sum; \n                kwargs...) \n\n\n\n\n\nfunction statistic(x::UniData, y::UniData, stat::Sum; \n                kwargs...)  \n\nSum of the elements in input data vector y.\n\nEquivalent to the one-sample t test statistic in general, see Statistic.\n\nx is the membership(::OneSampStatistic) vector.\n\n\n\n\n\n","category":"function"},{"location":"chose a test/#Chose-a-test","page":"Chose a Test","title":"Chose a test","text":"","category":"section"},{"location":"chose a test/","page":"Chose a Test","title":"Chose a Test","text":"The scheme below can help finding the appropriate hypothesis test giving the problem at hand.","category":"page"},{"location":"chose a test/","page":"Chose a Test","title":"Chose a Test","text":"Navigate from \"Start\" following the appropriate ellipses for your problem to find the solution  in the rectangles. The tests that are available in this package are numbered within parentheses and listed in the table below.","category":"page"},{"location":"chose a test/","page":"Chose a Test","title":"Chose a Test","text":"Remark that the kind of tests referred to as independent samples and repeated measures throughout this documentation are referred to in the schame as unpaired and paired, respectively. Those terms are synonimous.","category":"page"},{"location":"chose a test/","page":"Chose a Test","title":"Chose a Test","text":"(Image: Figure 1)","category":"page"},{"location":"chose a test/","page":"Chose a Test","title":"Chose a Test","text":" Univariate tests Multiple comparisons tests\n(1) chiSquaredTest chiSquaredMcTest\n(2) cochranqTest cochranqMcTest\n(3) mcNemarTest mcNemarMcTest\n(4) mcNemarTest mcNemarMcTest\n(5) signTest signMcTest\n(6) correlationTest correlationMcTest\n(7) studentTestRM studentMcTestRM\n(8) studentTestIS studentMcTestIS\n(9) anovaTestRM anovaMcTestRM\n(10) anovaTestIS anovaMcTestIS","category":"page"},{"location":"chose a test/","page":"Chose a Test","title":"Chose a Test","text":"","category":"page"},{"location":"chose a test/","page":"Chose a Test","title":"Chose a Test","text":"For more available tests, see univariate tests and multiple comparisons tests.","category":"page"},{"location":"#PermutationTests.jl","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"","category":"section"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"","category":"page"},{"location":"#Installation","page":"PermutationTests.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Execute the following command in Julia's REPL:","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"]add PermutationTests","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"","category":"page"},{"location":"#Requirements","page":"PermutationTests.jl","title":"Requirements","text":"","category":"section"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Julia: version ‚â• 1.10","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"","category":"page"},{"location":"#Dependencies","page":"PermutationTests.jl","title":"Dependencies","text":"","category":"section"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"standard Julia packages external packages\nRandom Combinatorics\nStatistics Folds\nTest ","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"","category":"page"},{"location":"#Quick-start","page":"PermutationTests.jl","title":"Quick start","text":"","category":"section"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Here are some quick examples to show how PermutationTests.jl works:","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Univariate test for correlation","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Given two vectors of N observations, x and y, test the null hypothesis ","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"H_0 r_(xy)=0, ","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"where r_(xy) is the Pearson product-moment correlation between x and y. ","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"First, we chose a Type I error Œ± , typically fixed to Ronald Fisher's classical 0.05 level.","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"using PermutationTests\nN=10 # number of observations\nx, y = randn(N), randn(N) # some random Gaussian data for example\nt = rTest(x, y)","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"We reject the null hypothesis if the p-value is less then or equal to Œ±, otherwise we suspend any judgement.","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"The result of the test is a structure, which fields are printed in yellow. For example:","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"t.p # p-value\nt.nperm # number of permutations used by the test","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Multiple comparison test for correlation","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Given a vector of N observations x and M vectors of N observations y_m, test simutaneously the M null hypotheses ","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"H_0(m)r_(x y_m)=0 m=1M, ","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"where r_(xy_m) is the Pearson product-moment correlation between x and the m^th vector y_m. ","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"First, we fix the family-wise error (FWE) rate we are willing to tolerate, say, at level 0.05.","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"using PermutationTests\nN=10 # number of observations\nM=100 # number of hypotheses\nx, Y = randn(N), [randn(N) for m=1:M] # random Gaussian data\nt = rMcTest(x, Y) # by default the FWE is 0.05","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"For each one of the m hypotheses, we reject the null hypothesis if its p-value is smaller than the nominal level (0.05), otherwise we suspend any judgement. ","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"The result of the test is a structure, which fields are printed in yellow. For example:","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"t.p # p-values\nt.obsstat # observed test statistics","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"","category":"page"},{"location":"#Preamble","page":"PermutationTests.jl","title":"Preamble","text":"","category":"section"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"If you have no idea what a statistical hypothesis test is, most probably you are on the wrong web page.","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"If you do, but you have no idea what a permutation test is, check first my introduction to permutation tests.","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"If you need help to establish what hypothesis test is appropriate for your data,  check this page.","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Permutation tests offer a different way to obtain the p-value usually obtained with well-known parametric tests, such as the t-test for independent samples, the ANOVA for repeated mesures, etc. In contrast to parametric tests, permutation tests may provide the exact p-value for the test, not an approximated value based on probability distribution theory, and make use of less stringent assumptions. ","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Moreover, using permutation tests it is possible to use any test-statistic, not just those with known distribution under the null hypothesis, as such distribution is obtained by data permutation.","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Permutation tests have been introduced by none other than R.A. Fisher and E.J.G Pitman in the late '30  (see the references), but has become feasable only thanks to the advent of modern computers.","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"When multiple hypotheses are to be tested simultaneously, the multiple comparisons problem arises: statistical tests perforormed on each hypothesis separatedly cannot control anymore the probability to falsely reject the null hypothesis (Type I error). Using the extremum-statistic (also known as min-p) union-intersection test (see Winkler et al., 2016), permutation tests control the probabilty to commit one or more Type I error over the total number of hypotheses tested, regardless the configuration of true and false hypotheses, that is, they control the family-wise error (FWE) rate in the strong sense (see Westfall and Young, 1993).","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"While other multiple comparisons correction procedures controlling the FWE exists, such as the well-known Bonferroni or Holm-Bonferroni, they assume independence of the hypotheses. Instead, permutation tests do not. Actually, they naturally adapt to any degree and form of correlation among the hypotheses, thus they result more powerful when the hypotheses are not independent (see power).","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Thanks to these characteristics, permutation tests conctitute the ideal framework for large-scale, possibly correlated, statistical hypothesis testing. This is the case, for instance of genomics (gene expression level) and neuroimaging (brain voxel activation), where up to hundreds of thousands of hypotheses, often largely correlated, must be tested simultaneusly.","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"","category":"page"},{"location":"#Overview","page":"PermutationTests.jl","title":"Overview","text":"","category":"section"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"PermutationTests.jl implements several univariate permutation tests and for all of them the corresponding multiple comparisons permutation tests based on the min-p union-intersection principle, with or without the step down procedure (Holmes et al., 1996; Westfall and Young, 1993). ","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"For multiple comparisons tests, only tha case when all hypotheses are homogeneous is considered (same test statistic, same number of observations divided in the same number of groups/measurements).","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Here is the list of available tests:","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"Univariate and Multiple Comparisons Permutation Tests\nPearson product-moment correlation\nTrend correlation (fit of any kind of regression)\nPoint bi-serial correlation*\nStudent's t for independent samples\n1-way ANOVA for independent samples\nŒß¬≤ for 2xK contingency tables*\nFisher exact test* (2x2 contingency tables)\nStudent's t for repeated-measures\n1-way ANOVA for repeated-measures\nCochran Q*\nMcNemar*\nOne-sample Student's t\nSign*\n* for dicothomous data","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"You may also find useful the tests we have created as examples of how to create new tests.","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"When the number of permutations is high, PermutationTests.jl computes approximate (Monte Carlo) p-values. All test functions switches automatically from systematic to Monte Carlo permutations, but the user can force them to use either one permutation listing procedure.","category":"page"},{"location":"","page":"PermutationTests.jl","title":"PermutationTests.jl","text":"For all kinds of implemented univariate tests, PermutationTests.jl always employs the most computationally effective equivalent test-statistic and only the required (non-redundant) systematic permutations, yielding very efficient permutation tests (see Benchmarks).","category":"page"},{"location":"statistics/#Statistics","page":"Statistics","title":"Statistics","text":"","category":"section"},{"location":"statistics/","page":"Statistics","title":"Statistics","text":"Collection of low-level, pure-julia, efficient functions for computing statistics and data transformations.","category":"page"},{"location":"statistics/","page":"Statistics","title":"Statistics","text":"These functions are heavely used internally by the package. You do not need them to carry out permutation tests, however they are exported  because they may turn useful. For general usage of this package you can skip this page altogheter.","category":"page"},{"location":"statistics/#Scalars-functions-of-vectors-(statistics)","page":"Statistics","title":"Scalars functions of vectors (statistics)","text":"","category":"section"},{"location":"statistics/","page":"Statistics","title":"Statistics","text":"Function descriptiion expression\n‚àë(x) sum sum_i=1^Nx_i\n‚àëof¬≤(x) sum of squares sum_i=1^Nx_i^2\n‚àë‚àëof¬≤(x) sum and sum of squares sum_i=1^Nx_i and sum_i=1^Nx_i^2 in one pass\nŒº(x) mean frac1N sum_i=1^Nx_i\ndispersion(x) sum of squared deviations sum_i=1^N(x_i- mu (x))^2\nœÉ¬≤(x) variance frac1N sum_i=1^N(x_i- mu (x))^2\nœÉ(x) standard deviation sqrtsigma^2(x)\n‚àë(x, y) sum of (x + y) sum_i=1^N(x_i+y_i)\nŒ†(c) product prod_i=1^Nx_i\n‚àëofŒ†(x, y) inner product of two vectors x cdot y = sum_i=1^N(x_i cdot y_i)","category":"page"},{"location":"statistics/#Vector-functions-of-vectors-(data-transformations)","page":"Statistics","title":"Vector functions of vectors (data transformations)","text":"","category":"section"},{"location":"statistics/","page":"Statistics","title":"Statistics","text":"Function descriptiion\nŒº0(x) recenter (zero mean): x_i gets x_i- mu (x) forall i=1 dots N\nœÉ1(x) equalize (unit standard deviation): x_i gets fracx_isigma (x) forall i=1 dots N\nŒº0œÉ1(x) standardize (zero mean and unit standard deviation): x_i gets fracx_i- mu (x)sigma (x) forall i=1 dots N","category":"page"},{"location":"statistics/","page":"Statistics","title":"Statistics","text":"‚àë\n‚àëof¬≤\n‚àë‚àëof¬≤\nŒº\ndispersion\nœÉ¬≤\nœÉ\nŒ†\n‚àëofŒ†","category":"page"},{"location":"statistics/#PermutationTests.‚àë","page":"Statistics","title":"PermutationTests.‚àë","text":"function (x::UniData)\n\nAlias for julia sum(x). Sum of the elements in x.\n\n\n\n\n\n","category":"function"},{"location":"statistics/#PermutationTests.‚àëof¬≤","page":"Statistics","title":"PermutationTests.‚àëof¬≤","text":"function ‚àëof¬≤(x::UniData)\n\nSum of squares of the elements in x\n\n\n\n\n\n","category":"function"},{"location":"statistics/#PermutationTests.‚àë‚àëof¬≤","page":"Statistics","title":"PermutationTests.‚àë‚àëof¬≤","text":"function ‚àë‚àëof¬≤(x::UniData)\n\nCompute the sum and sum of squares of the elements in x in one pass and return them as a 2-tuple.\n\nExamples\n\nusing PermutationTests\nx=randn(10)\ns, s¬≤ = ‚àë‚àëof¬≤(x)\n\n\n\n\n\n","category":"function"},{"location":"statistics/#PermutationTests.Œº","page":"Statistics","title":"PermutationTests.Œº","text":"function Œº(x::UniData) \n\nAlias for julia mean(x). Arithmetic mean of the elements in x.\n\n\n\n\n\n","category":"function"},{"location":"statistics/#PermutationTests.dispersion","page":"Statistics","title":"PermutationTests.dispersion","text":"function dispersion(x::UniData, mean::Real)\n\nSum of squared deviations of the elements in x around mean.\n\nmean must be provided and must be a real number.\n\nExamples\n\nusing PermutationTests\nx=randn(10)\nd=dispersion(x, Œº(x))\n\n\n\n\n\nfunction dispersion(x::UniData; \n    centered::Bool=false, mean::Realo=nothing)\n\nIf centered is true, return the sum of the squares of the elements in x,\n\notherwise, \n\nif mean is provided return the sum of squared deviations of the elements in x from mean,\n\notherwise,\n\nreturn the sum of squared deviations of the elements in x from their mean.\n\nExamples\n\nusing PermutationTests\nx=randn(10)\nx0=Œº0(x)\nŒºx=Œº(x)\nm=Œº(x)\n\n# in decreasing order of efficiency\nd1=dispersion(x0)\nd2=dispersion(x, mean=Œºx)\nd3=dispersion(x)\nd1==d2==d3 # -> true\n\n\n\n\n\n","category":"function"},{"location":"statistics/#PermutationTests.œÉ¬≤","page":"Statistics","title":"PermutationTests.œÉ¬≤","text":"function œÉ¬≤(x::UniData; \n    corrected::Bool=false, \n    centered::Bool=false, \n    mean::Realo=nothing) \n\nPopulation variance of the N elements in x (default), or its unbiased sample estimator if corrected is true.\n\nIf centered is true return the sum of the squared elements in x divided by N, or N-1 if  corrected is true,\n\notherwise,\n\ncall julia standard function var with arguments corrected and mean.\n\n\n\n\n\n","category":"function"},{"location":"statistics/#PermutationTests.œÉ","page":"Statistics","title":"PermutationTests.œÉ","text":"function œÉ(x::UniData; \n    corrected::Bool=false, \n    centered::Bool=false, \n    mean::Realo=nothing) \n\nPopulation standard deviation of the elements in x or its unbiased sample estimator.\n\nCall œÉ¬≤ with the same arguments and return its square root.\n\n\n\n\n\n","category":"function"},{"location":"statistics/#PermutationTests.Œ†","page":"Statistics","title":"PermutationTests.Œ†","text":"function Œ†(x::UniData)\n\nProduct of the elements in x. Alias of julia function prod.\n\n\n\n\n\n","category":"function"},{"location":"statistics/#PermutationTests.‚àëofŒ†","page":"Statistics","title":"PermutationTests.‚àëofŒ†","text":"function ‚àëofŒ†(x::Union{UniData, Tuple}, y::UniData) \n\nInner product of x and y.\n\n\n\n\n\n","category":"function"},{"location":"statistics/","page":"Statistics","title":"Statistics","text":"","category":"page"},{"location":"statistics/","page":"Statistics","title":"Statistics","text":"Œº0\nœÉ1\nŒº0œÉ1","category":"page"},{"location":"statistics/#PermutationTests.Œº0","page":"Statistics","title":"PermutationTests.Œº0","text":"function Œº0(x::UniData; \n    mean::Realo=nothing) \n\nReturn x centered (zero mean).\n\nCenter around mean if it is provided. mean must be a real number. \n\n\n\n\n\n","category":"function"},{"location":"statistics/#PermutationTests.œÉ1","page":"Statistics","title":"PermutationTests.œÉ1","text":"œÉ1(x::UniData; \n    corrected::Bool=false, \n    centered::Bool=false, \n    mean::Realo=nothing, \n    sd::Realo=nothing)\n\nReturn x equalized (unit standard deviation).\n\nIf sd is provided, return x equalized with respect to it,\n\notherwise call œÉ with optional arguments corrected, centered and mean and equalize x.\n\nExamples\n\nusing PermutationTests\nx=randn(3)\nŒºx=Œº(x) # mean\nœÉx=œÉ(x) # sd\nxŒº0=Œº0(x) # centered data\n\n# in decreasing order of efficiency\ne1=œÉ1(xŒº0; sd=œÉx, centered=true)\ne2=œÉ1(xŒº0; centered=true)\ne3=œÉ1(x; mean=Œºx, sd=œÉx)\ne4=œÉ1(x; mean=Œºx)\n\nprintln(œÉ(e4)‚âà1.0 ? \"OK\" : \"Error\") # -> \"OK\"\n\n\n\n\n\n","category":"function"},{"location":"statistics/#PermutationTests.Œº0œÉ1","page":"Statistics","title":"PermutationTests.Œº0œÉ1","text":"Œº0œÉ1(x::UniData; \n    corrected::Bool=false, \n    centered::Bool=false, \n    mean::Realo=nothing, \n    sd::Realo=nothing)\n\nReturn x standardized (zero mean and unit standard deviation).\n\nIf centered is true, equalize x by calling œÉ1 with optional arguents corrected, centered and sd,\n\notherwise standardize x after computing the mean, if it is not provided as mean, and the standard deviation, if it is not provided, calling œÉ[@ref] with optional arguments corrected and centered. \n\nExamples\n\nusing PermutationTests\nx=randn(3)\nŒºx=Œº(x) # mean\nœÉx=œÉ(x) # sd\nxŒº0=Œº0(x) # centered data\n\n# in decreasing order of efficiency\nz1=Œº0œÉ1(xŒº0; sd=œÉx, centered=true)\nz2=Œº0œÉ1(xŒº0; centered=true)\nz3=Œº0œÉ1(x; mean=Œºx, sd=œÉx)\nz4=Œº0œÉ1(x; mean=Œºx)\nz5=Œº0œÉ1(x; sd=œÉx)\nz6=Œº0œÉ1(x)\n\nprintln(Œº(z6)‚âà0. ? \"OK\" : \"Error\") # -> \"Ok\"\nprintln(œÉ(z6)‚âà1. ? \"OK\" : \"Error\") # -> 'OK\"\n\n\n\n\n\n","category":"function"}]
}
